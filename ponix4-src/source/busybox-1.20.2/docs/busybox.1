.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2013-06-06" "version 1.20.2" "busybox"
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
.Ve
.PP
.Vb 1
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util\-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX\s0. \s-1CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX\s0.
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln -s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 12
\&        [, [[, ash, awk, basename, beep, blkid, bunzip2, bzcat, bzip2, cat,
\&        chmod, chown, chvt, clear, cp, crond, crontab, cut, date, depmod,
\&        df, dirname, dmesg, dnsdomainname, du, echo, egrep, expr, fdisk,
\&        fgrep, flock, free, getty, grep, gunzip, halt, head, hostname,
\&        httpd, hwclock, ifconfig, init, insmod, kill, klogd, linuxrc, ln,
\&        loadkmap, login, ls, lsmod, lzcat, lzma, md5sum, mkdir, mkdosfs,
\&        mkfifo, mkfs.vfat, mknod, modprobe, more, mount, mv, nice, nohup,
\&        ntpd, pgrep, pidof, ping, pivot_root, poweroff, ps, pwd, rdate,
\&        readahead, reboot, rev, rm, rmdir, rmmod, route, sed, setserial, sh,
\&        sleep, sort, stty, su, swapoff, swapon, sync, sysctl, syslogd, tail,
\&        tar, telnetd, test, tftp, top, touch, tr, udhcpc, umount, uname,
\&        unexpand, unlzma, unxz, uptime, vi, wc, wget, xz, xzcat, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBash\fR" 4
.IX Item "ash"
ash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
.Vb 3
\&        -v VAR=VAL      Set variable
\&        -F SEP          Use SEP as field separator
\&        -f FILE         Read program from FILE
.Ve
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbeep\fR" 4
.IX Item "beep"
beep \-f \s-1FREQ\s0 \-l \s-1LEN\s0 \-d \s-1DELAY\s0 \-r \s-1COUNT\s0 \-n
.Sp
.Vb 5
\&        -f      Frequency in Hz
\&        -l      Length in ms
\&        -d      Delay in ms
\&        -r      Repetitions
\&        -n      Start new tone
.Ve
.IP "\fBblkid\fR" 4
.IX Item "blkid"
blkid [\s-1BLOCKDEV\s0]...
.Sp
Print UUIDs of all filesystems
.IP "\fBbunzip2\fR" 4
.IX Item "bunzip2"
bunzip2 [\-cf] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 2
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBbzcat\fR" 4
.IX Item "bzcat"
bzcat \s-1FILE\s0
.Sp
Decompress to stdout
.IP "\fBbzip2\fR" 4
.IX Item "bzip2"
bzip2 [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin) with bzip2 algorithm
.Sp
.Vb 4
\&        -1..9   Compression level
\&        -d      Decompress
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them to stdout
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-R] MODE[,MODE]... \s-1FILE\s0...
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst
.Sp
.Vb 1
\&        -R      Recurse
.Ve
.IP "\fBchown\fR" 4
.IX Item "chown"
chown [\-RhLHP]... OWNER[<.|:>[\s-1GROUP\s0]] \s-1FILE\s0...
.Sp
Change the owner and/or group of each \s-1FILE\s0 to \s-1OWNER\s0 and/or \s-1GROUP\s0
.Sp
.Vb 5
\&        -R      Recurse
\&        -h      Affect symlinks instead of symlink targets
\&        -L      Traverse all symlinks to directories
\&        -H      Traverse symlinks on command line only
\&        -P      Don't traverse symlinks (default)
.Ve
.IP "\fBchvt\fR" 4
.IX Item "chvt"
chvt N
.Sp
Change the foreground virtual terminal to /dev/ttyN
.IP "\fBclear\fR" 4
.IX Item "clear"
clear 
.Sp
Clear screen
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE\s0... \s-1DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 9
\&        -a      Same as -dpR
\&        -R,-r   Recurse
\&        -d,-P   Preserve symlinks (default if -R)
\&        -L      Follow all symlinks
\&        -H      Follow symlinks on command line
\&        -p      Preserve file attributes if possible
\&        -f      Overwrite
\&        -i      Prompt before overwrite
\&        -l,-s   Create (sym)links
.Ve
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond \-fbS \-l N \-L \s-1LOGFILE\s0 \-c \s-1DIR\s0
.Sp
.Vb 6
\&        -f      Foreground
\&        -b      Background (default)
\&        -S      Log to syslog (default)
\&        -l      Set log level. 0 is the most verbose, default 8
\&        -L      Log to file
\&        -c      Working dir
.Ve
.IP "\fBcrontab\fR" 4
.IX Item "crontab"
crontab [\-c \s-1DIR\s0] [\-u \s-1USER\s0] [\-ler]|[\s-1FILE\s0]
.Sp
.Vb 6
\&        -c      Crontab directory
\&        -u      User
\&        -l      List crontab
\&        -e      Edit crontab
\&        -r      Delete crontab
\&        FILE    Replace crontab by FILE ('-': stdin)
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        -b LIST Output only bytes from LIST
\&        -c LIST Output only characters from LIST
\&        -d CHAR Use CHAR instead of tab as the field delimiter
\&        -s      Output only the lines containing delimiter
\&        -f N    Print only these fields
\&        -n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 10
\&        [-s,--set] TIME Set time to TIME
\&        -u,--utc        Work in UTC (don't convert to local time)
\&        -R,--rfc-2822   Output RFC-2822 compliant date string
\&        -I[SPEC]        Output ISO-8601 compliant date string
\&                        SPEC='date' (default) for date only,
\&                        'hours', 'minutes', or 'seconds' for date and
\&                        time to the indicated precision
\&        -r,--reference FILE     Display last modification time of FILE
\&        -d,--date TIME  Display TIME, not 'now'
\&        -D FMT          Use FMT for -d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 5
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD-hh:mm[:ss]
\&        YYYY-MM-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdepmod\fR" 4
.IX Item "depmod"
depmod [\-n] [\-b \s-1BASE\s0] [\s-1VERSION\s0] [\s-1MODFILES\s0]...
.Sp
Generate modules.dep, alias, and symbols files
.Sp
.Vb 2
\&        -b BASE Use BASE/lib/modules/VERSION
\&        -n      Dry run: print files to stdout
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-Pk] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 2
\&        -P      POSIX output format
\&        -k      1024-byte blocks (default)
.Ve
.IP "\fBdirname\fR" 4
.IX Item "dirname"
dirname \s-1FILENAME\s0
.Sp
Strip non-directory suffix from \s-1FILENAME\s0
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-c] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 3
\&        -c              Clear ring buffer after printing
\&        -n LEVEL        Set console logging level
\&        -s SIZE         Buffer size
.Ve
.IP "\fBdu\fR" 4
.IX Item "du"
du [\-aHLdclsxk] [\s-1FILE\s0]...
.Sp
Summarize disk space used for each \s-1FILE\s0 and/or directory
.Sp
.Vb 9
\&        -a      Show file sizes too
\&        -L      Follow all symlinks
\&        -H      Follow symlinks on command line
\&        -d N    Limit output to directories (and files with -a) of depth < N
\&        -c      Show grand total
\&        -l      Count sizes many times if hard linked
\&        -s      Display only a total for each argument
\&        -x      Skip directories on different filesystems
\&        -k      Sizes in kilobytes (default)
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        -n      Suppress trailing newline
\&        -e      Interpret backslash escapes (i.e., \et=tab)
\&        -E      Don't interpret backslash escapes (default)
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 22
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 - ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like 'match' or an
\&                                operator like '/'
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfdisk\fR" 4
.IX Item "fdisk"
fdisk [\-ul] [\-C \s-1CYLINDERS\s0] [\-H \s-1HEADS\s0] [\-S \s-1SECTORS\s0] [\-b \s-1SSZ\s0] \s-1DISK\s0
.Sp
Change partition table
.Sp
.Vb 6
\&        -u              Start and End are in sectors (instead of cylinders)
\&        -l              Show partition table for each DISK, then exit
\&        -b 2048         (for certain MO disks) use 2048-byte sectors
\&        -C CYLINDERS    Set number of cylinders/heads/sectors
\&        -H HEADS
\&        -S SECTORS
.Ve
.IP "\fBflock\fR" 4
.IX Item "flock"
flock [\-sxun] FD|{\s-1FILE\s0 [\-c] \s-1PROG\s0 \s-1ARGS\s0}
.Sp
[Un]lock file descriptor, or lock \s-1FILE\s0, run \s-1PROG\s0
.Sp
.Vb 4
\&        -s      Shared lock
\&        -x      Exclusive lock (default)
\&        -u      Unlock FD
\&        -n      Fail rather than wait
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free 
.Sp
Display the amount of free and used system memory
.IP "\fBgetty\fR" 4
.IX Item "getty"
getty [\s-1OPTIONS\s0] BAUD_RATE[,BAUD_RATE]... \s-1TTY\s0 [\s-1TERMTYPE\s0]
.Sp
Open \s-1TTY\s0, prompt for login name, then invoke /bin/login
.Sp
.Vb 11
\&        -h              Enable hardware RTS/CTS flow control
\&        -L              Set CLOCAL (ignore Carrier Detect state)
\&        -m              Get baud rate from modem's CONNECT status message
\&        -n              Don't prompt for login name
\&        -w              Wait for CR or LF before sending /etc/issue
\&        -i              Don't display /etc/issue
\&        -f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        -l LOGIN        Invoke LOGIN instead of /bin/login
\&        -t SEC          Terminate after SEC if no login name is read
\&        -I INITSTR      Send INITSTR before anything else
\&        -H HOST         Log HOST into the utmp file as the hostname
.Ve
.Sp
\&\s-1BAUD_RATE\s0 of 0 leaves it unchanged
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriwFE] [\-m N] [\-A/B/C N] PATTERN/\-e \s-1PATTERN\s0.../\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 22
\&        -H      Add 'filename:' prefix
\&        -h      Do not add 'filename:' prefix
\&        -n      Add 'line_no:' prefix
\&        -l      Show only names of files that match
\&        -L      Show only names of files that don't match
\&        -c      Show only count of matching lines
\&        -o      Show only the matching part of line
\&        -q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        -v      Select non-matching lines
\&        -s      Suppress open and read errors
\&        -r      Recurse
\&        -i      Ignore case
\&        -w      Match whole words only
\&        -x      Match whole lines only
\&        -F      PATTERN is a literal (not regexp)
\&        -E      PATTERN is an extended regexp
\&        -m N    Match up to N times per file
\&        -A N    Print N lines of trailing context
\&        -B N    Print N lines of leading context
\&        -C N    Same as '-A N -B N'
\&        -e PTRN Pattern to match
\&        -f FILE Read pattern from file
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\-cft] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 3
\&        -c      Write to stdout
\&        -f      Force
\&        -t      Test file integrity
.Ve
.IP "\fBhalt\fR" 4
.IX Item "halt"
halt [\-d \s-1DELAY\s0] [\-n] [\-f] [\-w]
.Sp
Halt the system
.Sp
.Vb 4
\&        -d SEC  Delay interval
\&        -n      Do not sync
\&        -f      Force (don't go through init)
\&        -w      Only write a wtmp record
.Ve
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE\s0, precede each with a filename header.
.Sp
.Vb 4
\&        -n N[kbm]       Print first N lines
\&        -c N[kbm]       Print first N bytes
\&        -q              Never print headers
\&        -v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBhostname\fR" 4
.IX Item "hostname"
hostname [\s-1OPTIONS\s0] [\s-1HOSTNAME\s0 | \-F \s-1FILE\s0]
.Sp
Get or set hostname or \s-1DNS\s0 domain name
.Sp
.Vb 5
\&        -s      Short
\&        -i      Addresses for the hostname
\&        -d      DNS domain name
\&        -f      Fully qualified domain name
\&        -F FILE Use FILE's content as hostname
.Ve
.IP "\fBhttpd\fR" 4
.IX Item "httpd"
httpd [\-ifv[v]] [\-c \s-1CONFFILE\s0] [\-p [\s-1IP:\s0]PORT] [\-r \s-1REALM\s0] [\-h \s-1HOME\s0]
or httpd \-d/\-e \s-1STRING\s0
.Sp
Listen for incoming \s-1HTTP\s0 requests
.Sp
.Vb 9
\&        -i              Inetd mode
\&        -f              Don't daemonize
\&        -v[v]           Verbose
\&        -p [IP:]PORT    Bind to IP:PORT (default *:80)
\&        -r REALM        Authentication Realm for Basic Authentication
\&        -h HOME         Home directory (default .)
\&        -c FILE         Configuration file (default {/etc,HOME}/httpd.conf)
\&        -e STRING       HTML encode STRING
\&        -d STRING       URL decode STRING
.Ve
.IP "\fBhwclock\fR" 4
.IX Item "hwclock"
hwclock [\-r] [\-s] [\-w] [\-t] [\-l] [\-u] [\-f \s-1FILE\s0]
.Sp
Query and set hardware clock (\s-1RTC\s0)
.Sp
.Vb 8
\&        -r      Show hardware clock time
\&        -s      Set system time from hardware clock
\&        -w      Set hardware clock from system time
\&        -t      Set in-kernel timezone, correct system time
\&                if hardware clock is in local time
\&        -u      Assume hardware clock is kept in UTC
\&        -l      Assume hardware clock is kept in local time
\&        -f FILE Use specified device (e.g. /dev/rtc2)
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
.Vb 8
\&        [[-]broadcast [ADDRESS]] [[-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [outfill NN] [keepalive NN]
\&        [hw ether|infiniband ADDRESS] [metric NN] [mtu NN]
\&        [[-]trailers] [[-]arp] [[-]allmulti]
\&        [multicast] [[-]promisc] [txqueuelen NN] [[-]dynamic]
\&        [mem_start NN] [io_addr NN] [irq NN]
\&        [up|down] ...
.Ve
.IP "\fBinit\fR" 4
.IX Item "init"
init 
.Sp
Init is the parent of all processes
.IP "\fBinsmod\fR" 4
.IX Item "insmod"
insmod \s-1FILE\s0 [SYMBOL=VALUE]...
.Sp
Load the specified kernel modules into the kernel
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID\s0...
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        -l      List all signal names and numbers
.Ve
.IP "\fBklogd\fR" 4
.IX Item "klogd"
klogd [\-c N] [\-n]
.Sp
Kernel logger
.Sp
.Vb 2
\&        -c N    Print to console messages more urgent than prio N (1-8)
\&        -n      Run in foreground
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET\s0... LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 5
\&        -s      Make symlinks instead of hardlinks
\&        -f      Remove existing destinations
\&        -n      Don't dereference symlinks - treat like normal file
\&        -b      Make a backup of the target (if exists) before link operation
\&        -S suf  Use suffix instead of ~ when making backup files
.Ve
.IP "\fBloadkmap\fR" 4
.IX Item "loadkmap"
loadkmap < keymap
.Sp
Load a binary keyboard translation table from stdin
.IP "\fBlogin\fR" 4
.IX Item "login"
login [\-p] [\-h \s-1HOST\s0] [[\-f] \s-1USER\s0]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        -f      Don't authenticate (user already authenticated)
\&        -h      Name of the remote host
\&        -p      Preserve environment
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinserSXvctu] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 24
\&        -1      One column output
\&        -a      Include entries which start with .
\&        -A      Like -a, but exclude . and ..
\&        -C      List by columns
\&        -x      List by lines
\&        -d      List directory entries instead of contents
\&        -L      Follow symlinks
\&        -H      Follow symlinks on command line
\&        -R      Recurse
\&        -p      Append / to dir entries
\&        -F      Append indicator (one of */=@|) to entries
\&        -l      Long listing format
\&        -i      List inode numbers
\&        -n      List numeric UIDs and GIDs instead of names
\&        -s      List allocated blocks
\&        -e      List full date and time
\&        -r      Sort in reverse order
\&        -S      Sort by size
\&        -X      Sort by extension
\&        -v      Sort by version
\&        -c      With -l: sort by ctime
\&        -t      With -l: sort by mtime
\&        -u      With -l: sort by atime
\&        --color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlsmod\fR" 4
.IX Item "lsmod"
lsmod 
.Sp
List the currently loaded kernel modules
.IP "\fBlzcat\fR" 4
.IX Item "lzcat"
lzcat \s-1FILE\s0
.Sp
Decompress to stdout
.IP "\fBlzma\fR" 4
.IX Item "lzma"
lzma \-d [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 3
\&        -d      Decompress
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
.Vb 3
\&        -c      Check sums against list in FILEs
\&        -s      Don't output anything, status code shows success
\&        -w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY\s0...
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        -m MODE Mode
\&        -p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmkdosfs\fR" 4
.IX Item "mkdosfs"
mkdosfs [\-v] [\-n \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1FAT32\s0 filesystem
.Sp
.Vb 2
\&        -v      Verbose
\&        -n LBL  Volume label
.Ve
.IP "\fBmkfifo\fR" 4
.IX Item "mkfifo"
mkfifo [\-m \s-1MODE\s0] \s-1NAME\s0
.Sp
Create named pipe
.Sp
.Vb 1
\&        -m MODE Mode (default a=rw)
.Ve
.IP "\fBmkfs.vfat\fR" 4
.IX Item "mkfs.vfat"
mkfs.vfat [\-v] [\-n \s-1LABEL\s0] \s-1BLOCKDEV\s0 [\s-1KBYTES\s0]
.Sp
Make a \s-1FAT32\s0 filesystem
.Sp
.Vb 2
\&        -v      Verbose
\&        -n LBL  Volume label
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME\s0 \s-1TYPE\s0 \s-1MAJOR\s0 \s-1MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        -m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmodprobe\fR" 4
.IX Item "modprobe"
modprobe [\-alrqvsD] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 7
\&        -a      Load multiple MODULEs
\&        -l      List (MODULE is a pattern)
\&        -r      Remove MODULE (stacks) or do autoclean
\&        -q      Quiet
\&        -v      Verbose
\&        -s      Log to syslog
\&        -D      Show dependencies
.Ve
.IP "\fBmore\fR" 4
.IX Item "more"
more [\s-1FILE\s0]...
.Sp
View \s-1FILE\s0 (or stdin) one screenful at a time
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPTS\s0] \s-1DEVICE\s0 \s-1NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 21
\&        -a              Mount all filesystems in fstab
\&        -r              Read-only mount
\&        -w              Read-write mount (default)
\&        -t FSTYPE[,...] Filesystem type(s)
\&        -O OPT          Mount only filesystems with option OPT (-a only)
\&-o OPT:
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set-user-id-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro/rw           Same as -r/-w
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE\s0 \s-1DEST\s0
or: mv [\-fin] \s-1SOURCE\s0... \s-1DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST\s0, or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        -f      Don't prompt before overwriting
\&        -i      Interactive, prompt before overwrite
\&        -n      Don't overwrite an existing file
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG\s0 \s-1ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        -n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG\s0 \s-1ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBntpd\fR" 4
.IX Item "ntpd"
ntpd [\-dnqNw] [\-S \s-1PROG\s0] [\-p \s-1PEER\s0]...
.Sp
\&\s-1NTP\s0 client/server
.Sp
.Vb 7
\&        -d      Verbose
\&        -n      Do not daemonize
\&        -q      Quit after clock is set
\&        -N      Run at high priority
\&        -w      Do not set time (only query peers), implies -n
\&        -S PROG Run PROG after stepping time, stratum change, and every 11 mins
\&        -p PEER Obtain time from PEER (may be repeated)
.Ve
.IP "\fBpgrep\fR" 4
.IX Item "pgrep"
pgrep [\-flnovx] [\-s SID|\-P PPID|PATTERN]
.Sp
Display process(es) selected by regex \s-1PATTERN\s0
.Sp
.Vb 8
\&        -l      Show command name too
\&        -f      Match against entire command line
\&        -n      Show the newest process only
\&        -o      Show the oldest process only
\&        -v      Negate the match
\&        -x      Match whole name (not substring)
\&        -s      Match session ID (0 for current)
\&        -P      Match parent process ID
.Ve
.IP "\fBpidof\fR" 4
.IX Item "pidof"
pidof [\s-1OPTIONS\s0] [\s-1NAME\s0]...
.Sp
List PIDs of all processes with names that match NAMEs
.Sp
.Vb 3
\&        -s      Show only one PID
\&        -o PID  Omit given pid
\&                Use %PPID to omit pid of pidof's parent
.Ve
.IP "\fBping\fR" 4
.IX Item "ping"
ping [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP\s0 \s-1ECHO_REQUEST\s0 packets to network hosts
.Sp
.Vb 11
\&        -4,-6           Force IP or IPv6 name resolution
\&        -c CNT          Send only CNT pings
\&        -s SIZE         Send SIZE data bytes in packets (default:56)
\&        -t TTL          Set TTL
\&        -I IFACE/IP     Use interface or IP address as source
\&        -W SEC          Seconds to wait for the first response (default:10)
\&                        (after all -c CNT packets are sent)
\&        -w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with -c CNT)
\&        -q              Quiet, only displays output at start
\&                        and when finished
.Ve
.IP "\fBpivot_root\fR" 4
.IX Item "pivot_root"
pivot_root \s-1NEW_ROOT\s0 \s-1PUT_OLD\s0
.Sp
Move the current root file system to \s-1PUT_OLD\s0 and make \s-1NEW_ROOT\s0
the new root file system
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        -d SEC  Delay interval
\&        -n      Do not sync
\&        -f      Force (don't go through init)
.Ve
.IP "\fBps\fR" 4
.IX Item "ps"
ps 
.Sp
Show list of processes
.Sp
.Vb 2
\&        w       Wide output
\&        l       Long output
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd 
.Sp
Print the full filename of the current working directory
.IP "\fBrdate\fR" 4
.IX Item "rdate"
rdate [\-sp] \s-1HOST\s0
.Sp
Get and possibly set the system date and time from a remote \s-1HOST\s0
.Sp
.Vb 2
\&        -s      Set the system date and time (default)
\&        -p      Print the date and time
.Ve
.IP "\fBreadahead\fR" 4
.IX Item "readahead"
readahead [\s-1FILE\s0]...
.Sp
Preload FILEs to \s-1RAM\s0
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Reboot the system
.Sp
.Vb 3
\&        -d SEC  Delay interval
\&        -n      Do not sync
\&        -f      Force (don't go through init)
.Ve
.IP "\fBrev\fR" 4
.IX Item "rev"
rev [\s-1FILE\s0]...
.Sp
Reverse lines of \s-1FILE\s0
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE\s0...
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        -i      Always prompt before removing
\&        -f      Never prompt
\&        -R,-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY\s0...
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 1
\&        -p      Include parents
.Ve
.IP "\fBrmmod\fR" 4
.IX Item "rmmod"
rmmod [\-wfa] [\s-1MODULE\s0]...
.Sp
Unload kernel modules
.Sp
.Vb 3
\&        -w      Wait until the module is no longer used
\&        -f      Force unload
\&        -a      Remove all unused modules (recursively)
.Ve
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
.Vb 3
\&        -n      Don't resolve names
\&        -e      Display other/more information
\&        -A inet Select address family
.Ve
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-inr] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-inr] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 5
\&        -e CMD  Add CMD to sed commands to be executed
\&        -f FILE Add FILE contents to sed commands to be executed
\&        -i      Edit files in-place (else sends result to stdout)
\&        -n      Suppress automatic printing of pattern space
\&        -r      Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBsetserial\fR" 4
.IX Item "setserial"
setserial [\-gabGvzV] \s-1DEVICE\s0 [\s-1PARAMETER\s0 [\s-1ARG\s0]]...
.Sp
Request or set Linux serial port information
.Sp
.Vb 7
\&        -g      Interpret parameters as list of devices for reporting
\&        -a      Print all available information
\&        -b      Print summary information
\&        -G      Print in form which can be fed back
\&                to setserial as command line parameters
\&        -z      Zero out serial flags before setting
\&        -v      Verbose
.Ve
.Sp
Parameters: (* = takes an argument, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baund_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust
.Sp
\&\s-1UART\s0 types:
.Sp
.Vb 3
\&        unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
\&        16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
\&        U6_16550A
.Ve
.IP "\fBsh\fR" 4
.IX Item "sh"
sh [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep N
.Sp
Pause for N seconds
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfimSTokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 17
\&        -b      Ignore leading blanks
\&        -c      Check whether input is sorted
\&        -d      Dictionary order (blank or alphanumeric only)
\&        -f      Ignore case
\&        -g      General numerical sort
\&        -i      Ignore unprintable characters
\&        -k      Sort key
\&        -M      Sort month
\&        -n      Sort numbers
\&        -o      Output to file
\&        -k      Sort by key
\&        -t CHAR Key separator
\&        -r      Reverse sort order
\&        -s      Stable (don't sort ties alphabetically)
\&        -u      Suppress duplicate lines
\&        -z      Lines are terminated by NUL, not newline
\&        -mST    Ignored for GNU compatibility
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        -F DEVICE       Open device instead of stdin
\&        -a              Print all current settings in human-readable form
\&        -g              Print in stty-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBsu\fR" 4
.IX Item "su"
su [\s-1OPTIONS\s0] [\-] [\s-1USER\s0]
.Sp
Run shell under \s-1USER\s0 (by default, root)
.Sp
.Vb 4
\&        -,-l    Clear environment, run shell as login shell
\&        -p,-m   Do not set new $HOME, $SHELL, $USER, $LOGNAME
\&        -c CMD  Command to pass to 'sh -c'
\&        -s SH   Shell to use instead of user's default
.Ve
.IP "\fBswapoff\fR" 4
.IX Item "swapoff"
swapoff [\-a] [\s-1DEVICE\s0]
.Sp
Stop swapping on \s-1DEVICE\s0
.Sp
.Vb 1
\&        -a      Stop swapping on all swap devices
.Ve
.IP "\fBswapon\fR" 4
.IX Item "swapon"
swapon [\-a] [\s-1DEVICE\s0]
.Sp
Start swapping on \s-1DEVICE\s0
.Sp
.Vb 1
\&        -a      Start swapping on all swap devices
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync 
.Sp
Write all buffered blocks to disk
.IP "\fBsysctl\fR" 4
.IX Item "sysctl"
sysctl [\s-1OPTIONS\s0] [\s-1VALUE\s0]...
.Sp
Configure kernel parameters at runtime
.Sp
.Vb 6
\&        -n      Don't print key names
\&        -e      Don't warn about unknown keys
\&        -w      Change sysctl setting
\&        -p FILE Load sysctl settings from FILE (default /etc/sysctl.conf)
\&        -a      Display all values
\&        -A      Display all values in table form
.Ve
.IP "\fBsyslogd\fR" 4
.IX Item "syslogd"
syslogd [\s-1OPTIONS\s0]
.Sp
System logging utility
(this version of syslogd ignores /etc/syslog.conf)
.Sp
.Vb 4
\&        -n              Run in foreground
\&        -O FILE         Log to FILE (default:/var/log/messages)
\&        -l N            Log only messages more urgent than prio N (1-8)
\&        -S              Smaller output
.Ve
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 (or stdin) to stdout.
With more than one \s-1FILE\s0, precede each with a filename header.
.Sp
.Vb 6
\&        -f              Print data as file grows
\&        -s SECONDS      Wait SECONDS between reads with -f
\&        -n N[kbm]       Print last N lines
\&        -c N[kbm]       Print last N bytes
\&        -q              Never print headers
\&        -v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
If N starts with a '+', output begins with the Nth item from the start
of each file, not from the end.
.IP "\fBtar\fR" 4
.IX Item "tar"
tar \-[cxthvO] [\-X \s-1FILE\s0] [\-T \s-1FILE\s0] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
Operation:
.Sp
.Vb 11
\&        c       Create
\&        x       Extract
\&        t       List
\&        f       Name of TARFILE ('-' for stdin/out)
\&        C       Change to DIR before operation
\&        v       Verbose
\&        O       Extract to stdout
\&        h       Follow symlinks
\&        exclude File to exclude
\&        X       File with names to exclude
\&        T       File with names to include
.Ve
.IP "\fBtelnetd\fR" 4
.IX Item "telnetd"
telnetd [\s-1OPTIONS\s0]
.Sp
Handle incoming telnet connections via inetd
.Sp
.Vb 4
\&        -l LOGIN        Exec LOGIN on connect
\&        -f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        -K              Close connection as soon as login exits
\&                        (normally wait until all programs close slave pty)
.Ve
.IP "\fBtest\fR" 4
.IX Item "test"
test \s-1EXPRESSION\s0 ]
.Sp
Check file types, compare values etc. Return a 0/1 exit code
depending on logical value of \s-1EXPRESSION\s0
.IP "\fBtftp\fR" 4
.IX Item "tftp"
tftp [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1PORT\s0]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 5
\&        -l FILE Local FILE
\&        -r FILE Remote FILE
\&        -g      Get file
\&        -p      Put file
\&        -b SIZE Transfer blocks of SIZE octets
.Ve
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS] [\-m]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and display a screenful of them.
Keys:
.Sp
.Vb 5
\&        N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
\&        S: show memory
\&        R: reverse sort
\&        1: toggle SMP
\&        Q,^C: exit
.Ve
.Sp
Options:
.Sp
.Vb 4
\&        -b      Batch mode
\&        -n N    Exit after N iterations
\&        -d N    Delay between updates
\&        -m      Same as 's' key
.Ve
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] [\-d \s-1DATE\s0] [\-t \s-1DATE\s0] [\-r \s-1FILE\s0] \s-1FILE\s0...
.Sp
Update the last-modified date on the given FILE[s]
.Sp
.Vb 4
\&        -c      Don't create files
\&        -d DT   Date/time to use
\&        -t DT   Date/time to use
\&        -r FILE Use FILE's date/time
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        -c      Take complement of STRING1
\&        -d      Delete input characters coded STRING1
\&        -s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBudhcpc\fR" 4
.IX Item "udhcpc"
udhcpc [\-fbnqoCRB] [\-i \s-1IFACE\s0] [\-r \s-1IP\s0] [\-s \s-1PROG\s0] [\-p \s-1PIDFILE\s0]
	[\-V \s-1VENDOR\s0] [\-x \s-1OPT:VAL\s0]... [\-O \s-1OPT\s0]...
.Sp
.Vb 26
\&        -i,--interface IFACE    Interface to use (default eth0)
\&        -p,--pidfile FILE       Create pidfile
\&        -s,--script PROG        Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
\&        -B,--broadcast          Request broadcast replies
\&        -t,--retries N          Send up to N discover packets
\&        -T,--timeout N          Pause between packets (default 3 seconds)
\&        -A,--tryagain N         Wait N seconds after failure (default 20)
\&        -f,--foreground         Run in foreground
\&        -b,--background         Background if lease is not obtained
\&        -n,--now                Exit if lease is not obtained
\&        -q,--quit               Exit after obtaining lease
\&        -R,--release            Release IP on exit
\&        -S,--syslog             Log to syslog too
\&        -a,--arping             Use arping to validate offered address
\&        -O,--request-option OPT Request option OPT from server (cumulative)
\&        -o,--no-default-options Don't request any options (unless -O is given)
\&        -r,--request IP         Request this IP address
\&        -x OPT:VAL              Include option OPT in sent packets (cumulative)
\&                                Examples of string, numeric, and hex byte opts:
\&                                -x hostname:bbox - option 12
\&                                -x lease:3600 - option 51 (lease time)
\&                                -x 0x3d:0100BEEFC0FFEE - option 61 (client id)
\&        -F,--fqdn NAME          Ask server to update DNS mapping for NAME
\&        -V,--vendorclass VENDOR Vendor identifier (default 'udhcp VERSION')
\&        -C,--clientid-none      Don't send MAC as client identifier
\&Signals:
.Ve
.Sp
.Vb 2
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
.Vb 4
\&        -a      Unmount all file systems
\&        -r      Try to remount devices as read-only if mount is busy
\&        -l      Lazy umount (detach filesystem)
\&        -f      Force umount (i.e., unreachable NFS server)
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspv]
.Sp
Print system information
.Sp
.Vb 7
\&        -a      Print all
\&        -m      The machine (hardware) type
\&        -n      Hostname
\&        -r      OS release
\&        -s      OS name (default)
\&        -p      Processor type
\&        -v      OS version
.Ve
.IP "\fBunexpand\fR" 4
.IX Item "unexpand"
unexpand [\-fa][\-t N] [\s-1FILE\s0]...
.Sp
Convert spaces to tabs, writing to stdout
.Sp
.Vb 3
\&        -a      Convert all blanks
\&        -f      Convert only leading blanks
\&        -t N    Tabstops every N chars
.Ve
.IP "\fBunlzma\fR" 4
.IX Item "unlzma"
unlzma [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 2
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBunxz\fR" 4
.IX Item "unxz"
unxz [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 2
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime 
.Sp
Display the time since the last boot
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
.Vb 3
\&        -c      Initial command to run ($EXINIT also available)
\&        -R      Read-only
\&        -H      Short help regarding available features
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-cmlwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for each \s-1FILE\s0 (or stdin)
.Sp
.Vb 5
\&        -c      Count bytes
\&        -m      Count characters
\&        -l      Count newlines
\&        -w      Count words
\&        -L      Print longest line length
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-c|\-\-continue] [\-s|\-\-spider] [\-q|\-\-quiet] [\-O|\-\-output\-document \s-1FILE\s0]
	[\-\-header 'header: value'] [\-Y|\-\-proxy on/off] [\-P \s-1DIR\s0]
	[\-\-no\-check\-certificate] [\-U|\-\-user\-agent \s-1AGENT\s0] [\-T \s-1SEC\s0] \s-1URL\s0...
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
.Vb 8
\&        -s      Spider mode - only check file existence
\&        -c      Continue retrieval of aborted transfer
\&        -q      Quiet
\&        -P DIR  Save to DIR (default .)
\&        -T SEC  Network read timeout is SEC seconds
\&        -O FILE Save to FILE ('-' for stdout)
\&        -U STR  Use STR for User-Agent header
\&        -Y      Use proxy ('on' or 'off')
.Ve
.IP "\fBxz\fR" 4
.IX Item "xz"
xz \-d [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE\s0 (or stdin)
.Sp
.Vb 3
\&        -d      Decompress
\&        -c      Write to stdout
\&        -f      Force
.Ve
.IP "\fBxzcat\fR" 4
.IX Item "xzcat"
xzcat \s-1FILE\s0
.Sp
Decompress to stdout
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat \s-1FILE\s0
.Sp
Decompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS\s0.  Some applets however, such as login and su, will use libc functions
that require \s-1NSS\s0.
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP\s0, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS\s0.  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
.Ve
.PP
.Vb 4
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget - Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style-guide, new-applet-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
