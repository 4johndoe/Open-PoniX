`configure' configures gtk+ 3.2.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/gtk+]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

X features:
  --x-includes=DIR    X include files are in DIR
  --x-libraries=DIR   X library files are in DIR

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --disable-maintainer-mode  disable make rules and dependencies not useful
			  (and sometimes confusing) to the casual installer
  --enable-silent-rules          less verbose build output (undo: `make V=1')
  --disable-silent-rules         verbose build output (undo: `make V=0')
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-static[=PKGS]  build static libraries [default=no]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-largefile     omit support for large files
  --enable-debug=[no/minimum/yes]
                          turn on debugging [default=debug_default]
  --disable-rebuilds      disable all source autogeneration rules
  --enable-gtk2-dependency
                          Do not build gtk-update-icon-cache and other shared
                          tools
  --enable-xkb            support XKB extension [default=maybe]
  --enable-xinerama       support Xinerama extension if available
                          [default=maybe]
  --enable-xinput         support XInput extension if available [default=yes]
  --enable-xrandr         support XRandR extension if available
                          [default=maybe]
  --enable-xfixes         support XFixes extension if available
                          [default=maybe]
  --enable-xcomposite     support X Composite extension if available
                          [default=maybe]
  --enable-xdamage        support X Damage extension if available
                          [default=maybe]
  --enable-x11-backend    enable the X11 gdk backend
  --enable-win32-backend  enable the Win32 gdk backend
  --enable-quartz-backend enable the quartz gdk backend
  --enable-broadway-backend
                          enable the broadway (HTML5) gdk backend
  --enable-wayland-backend
                          enable the wayland gdk backend
  --enable-explicit-deps=[yes/no/auto]
                          use explicit dependencies in .pc files
                          [default=auto]
  --disable-glibtest      do not try to compile and run a test GLIB program
  --disable-modules       disable dynamic module loading
  --disable-cups          disable cups print backend
  --disable-papi          disable papi print backend
  --enable-test-print-backend
                          build test print backend
  --disable-schemas-compile
                          Disable regeneration of gschemas.compiled on install
  --enable-introspection=[no/auto/yes]
                          Enable introspection for this build
  --enable-packagekit=[yes/no/auto]
                          build PackageKit open-with module [default=auto]
  --enable-colord=[yes/no/auto]
                          build colord support code [default=auto]
  --enable-gtk-doc        use gtk-doc to build documentation [[default=no]]
  --enable-gtk-doc-html   build documentation in html format [[default=yes]]
  --enable-gtk-doc-pdf    build documentation in pdf format [[default=no]]
  --enable-man            regenerate man pages from Docbook [default=no]
  --disable-Bsymbolic     avoid linking with -Bsymbolic

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot=DIR Search for dependent libraries within DIR
                        (or the compiler's sysroot if not specified).
  --with-included-immodules=MODULE1,MODULE2,...
                          build the specified input methods into gtk
  --with-x                use the X Window System
  --with-html-dir=PATH    path to installed docs
  --with-xml-catalog=CATALOG
                          path to xml catalog to use

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  BASE_DEPENDENCIES_CFLAGS
              C compiler flags for BASE_DEPENDENCIES, overriding pkg-config
  BASE_DEPENDENCIES_LIBS
              linker flags for BASE_DEPENDENCIES, overriding pkg-config
  CAIRO_BACKEND_CFLAGS
              C compiler flags for CAIRO_BACKEND, overriding pkg-config
  CAIRO_BACKEND_LIBS
              linker flags for CAIRO_BACKEND, overriding pkg-config
  XMKMF       Path to xmkmf, Makefile generator for X Window System
  COLORD_CFLAGS
              C compiler flags for COLORD, overriding pkg-config
  COLORD_LIBS linker flags for COLORD, overriding pkg-config
  GTKDOC_DEPS_CFLAGS
              C compiler flags for GTKDOC_DEPS, overriding pkg-config
  GTKDOC_DEPS_LIBS
              linker flags for GTKDOC_DEPS, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <http://bugzilla.gnome.org/enter_bug.cgi?product=gtk%2B>.
