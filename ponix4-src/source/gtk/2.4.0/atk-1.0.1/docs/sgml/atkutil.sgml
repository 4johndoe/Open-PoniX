<refentry id="atk-AtkUtil">
<refmeta>
<refentrytitle>AtkUtil</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkUtil</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="AtkUtil">AtkUtil</link>;
enum        <link linkend="AtkCoordType">AtkCoordType</link>;
<link linkend="guint">guint</link>       <link linkend="atk-add-focus-tracker">atk_add_focus_tracker</link>           (<link linkend="AtkEventListener">AtkEventListener</link> focus_tracker);
void        <link linkend="atk-remove-focus-tracker">atk_remove_focus_tracker</link>        (<link linkend="guint">guint</link> tracker_id);
void        <link linkend="atk-focus-tracker-init">atk_focus_tracker_init</link>          (<link linkend="AtkEventListenerInit">AtkEventListenerInit</link> add_function);
void        <link linkend="atk-focus-tracker-notify">atk_focus_tracker_notify</link>        (<link linkend="AtkObject">AtkObject</link> *object);
void        (<link linkend="AtkEventListener">*AtkEventListener</link>)             (<link linkend="AtkObject">AtkObject</link>*);
void        (<link linkend="AtkEventListenerInit">*AtkEventListenerInit</link>)         (void);
<link linkend="guint">guint</link>       <link linkend="atk-add-global-event-listener">atk_add_global_event_listener</link>   (<link linkend="GSignalEmissionHook">GSignalEmissionHook</link> listener,
                                             const <link linkend="gchar">gchar</link> *event_type);
void        <link linkend="atk-remove-global-event-listener">atk_remove_global_event_listener</link>
                                            (<link linkend="guint">guint</link> listener_id);
struct      <link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link>;
enum        <link linkend="AtkKeyEventType">AtkKeyEventType</link>;
<link linkend="gint">gint</link>        (<link linkend="AtkKeySnoopFunc">*AtkKeySnoopFunc</link>)              (<link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link> *event,
                                             <link linkend="gpointer">gpointer</link> func_data);
<link linkend="guint">guint</link>       <link linkend="atk-add-key-event-listener">atk_add_key_event_listener</link>      (<link linkend="AtkKeySnoopFunc">AtkKeySnoopFunc</link> listener,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="atk-remove-key-event-listener">atk_remove_key_event_listener</link>   (<link linkend="guint">guint</link> listener_id);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-get-root">atk_get_root</link>                    (void);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-get-toolkit-name">atk_get_toolkit_name</link>  (void);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-get-toolkit-version">atk_get_toolkit_version</link>
                                            (void);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkUtil">struct AtkUtil</title>
<programlisting>struct AtkUtil
{
  GObject parent;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkCoordType">enum AtkCoordType</title>
<programlisting>typedef enum {
  ATK_XY_SCREEN,
  ATK_XY_WINDOW
}AtkCoordType;
</programlisting>
<para>
Specifies how xy coordinates are to be interpreted. Used by functions such
as <link linkend="atk-component-get-position">atk_component_get_position</link>() and <link linkend="atk-text-get-character-extents">atk_text_get_character_extents</link>()</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>ATK_XY_SCREEN</literal></entry>
<entry> specifies xy coordinates relative to the screen
</entry>
</row>
<row>
<entry><literal>ATK_XY_WINDOW</literal></entry>
<entry> specifies xy coordinates relative to the widgets 
top-level window
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-add-focus-tracker">atk_add_focus_tracker ()</title>
<programlisting><link linkend="guint">guint</link>       atk_add_focus_tracker           (<link linkend="AtkEventListener">AtkEventListener</link> focus_tracker);</programlisting>
<para>
Adds the specified function to the list of functions to be called
when an object receives focus.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>focus_tracker</parameter>&nbsp;:</entry>
<entry> Function to be added to the list of functions to be called
when an object receives focus.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> added focus tracker id, or 0 on failure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-remove-focus-tracker">atk_remove_focus_tracker ()</title>
<programlisting>void        atk_remove_focus_tracker        (<link linkend="guint">guint</link> tracker_id);</programlisting>
<para>
Removes the specified focus tracker from the list of functions
to be called when any object receives focus.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>tracker_id</parameter>&nbsp;:</entry>
<entry> the id of the focus tracker to remove
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-focus-tracker-init">atk_focus_tracker_init ()</title>
<programlisting>void        atk_focus_tracker_init          (<link linkend="AtkEventListenerInit">AtkEventListenerInit</link> add_function);</programlisting>
<para>
Specifies the function to be called for focus tracker initialization.
This function should be called by an implementation of the
ATK interface if any specific work needs to be done to enable
focus tracking.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>add_function</parameter>&nbsp;:</entry>
<entry> Function to be called for focus tracker initialization
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-focus-tracker-notify">atk_focus_tracker_notify ()</title>
<programlisting>void        atk_focus_tracker_notify        (<link linkend="AtkObject">AtkObject</link> *object);</programlisting>
<para>
Cause the focus tracker functions which have been specified to be
executed for the object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>object</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkEventListener">AtkEventListener ()</title>
<programlisting>void        (*AtkEventListener)             (<link linkend="AtkObject">AtkObject</link>*);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>Param1</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkEventListenerInit">AtkEventListenerInit ()</title>
<programlisting>void        (*AtkEventListenerInit)         (void);</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="atk-add-global-event-listener">atk_add_global_event_listener ()</title>
<programlisting><link linkend="guint">guint</link>       atk_add_global_event_listener   (<link linkend="GSignalEmissionHook">GSignalEmissionHook</link> listener,
                                             const <link linkend="gchar">gchar</link> *event_type);</programlisting>
<para>
Adds the specified function to the list of functions to be called
when an event of type event_type occurs.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> the listener to notify
</entry></row>
<row><entry align="right"><parameter>event_type</parameter>&nbsp;:</entry>
<entry> the type of event for which notification is requested
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> added event listener id, or 0 on failure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-remove-global-event-listener">atk_remove_global_event_listener ()</title>
<programlisting>void        atk_remove_global_event_listener
                                            (<link linkend="guint">guint</link> listener_id);</programlisting>
<para>
Removes the specified event listener</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener_id</parameter>&nbsp;:</entry>
<entry> the id of the event listener to remove
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkKeyEventStruct">struct AtkKeyEventStruct</title>
<programlisting>struct AtkKeyEventStruct {
  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;	
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkKeyEventType">enum AtkKeyEventType</title>
<programlisting>typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkKeySnoopFunc">AtkKeySnoopFunc ()</title>
<programlisting><link linkend="gint">gint</link>        (*AtkKeySnoopFunc)              (<link linkend="AtkKeyEventStruct">AtkKeyEventStruct</link> *event,
                                             <link linkend="gpointer">gpointer</link> func_data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>event</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>func_data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-add-key-event-listener">atk_add_key_event_listener ()</title>
<programlisting><link linkend="guint">guint</link>       atk_add_key_event_listener      (<link linkend="AtkKeySnoopFunc">AtkKeySnoopFunc</link> listener,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds the specified function to the list of functions to be called
       when a key event occurs.  The <parameter>data</parameter> element will be passed to the
       <link linkend="AtkKeySnoopFunc">AtkKeySnoopFunc</link> (<parameter>listener</parameter>) as the <parameter>func_data</parameter> param, on notification.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener</parameter>&nbsp;:</entry>
<entry> the listener to notify
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> a <link linkend="gpointer">gpointer</link> that points to a block of data that should be sent to the registered listeners,
       along with the event notification, when it occurs.  
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> added event listener id, or 0 on failure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-remove-key-event-listener">atk_remove_key_event_listener ()</title>
<programlisting>void        atk_remove_key_event_listener   (<link linkend="guint">guint</link> listener_id);</programlisting>
<para>
Removes the specified event listener</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>listener_id</parameter>&nbsp;:</entry>
<entry> the id of the event listener to remove
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-get-root">atk_get_root ()</title>
<programlisting><link linkend="AtkObject">AtkObject</link>*  atk_get_root                    (void);</programlisting>
<para>
Gets the root accessible container for the current application.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the root accessible container for the current application
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-get-toolkit-name">atk_get_toolkit_name ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_get_toolkit_name  (void);</programlisting>
<para>
Gets name string for the GUI toolkit implementing ATK for this application.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> name string for the GUI toolkit implementing ATK for this application
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-get-toolkit-version">atk_get_toolkit_version ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_get_toolkit_version
                                            (void);</programlisting>
<para>
Gets version string for the GUI toolkit implementing ATK for this application.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> version string for the GUI toolkit implementing ATK for this application
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
