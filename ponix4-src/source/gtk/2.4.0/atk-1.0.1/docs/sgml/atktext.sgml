<refentry id="atk-AtkText">
<refmeta>
<refentrytitle>AtkText</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkText</refname><refpurpose>ATK Interface provided by components with text content.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="AtkText">AtkText</link>;
struct      <link linkend="AtkTextIface">AtkTextIface</link>;
enum        <link linkend="AtkTextBoundary">AtkTextBoundary</link>;
struct      <link linkend="AtkAttribute">AtkAttribute</link>;
typedef     <link linkend="AtkAttributeSet">AtkAttributeSet</link>;
enum        <link linkend="AtkTextAttribute">AtkTextAttribute</link>;
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text">atk_text_get_text</link>               (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gunichar">gunichar</link>    <link linkend="atk-text-get-character-at-offset">atk_text_get_character_at_offset</link>
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-after-offset">atk_text_get_text_after_offset</link>  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-at-offset">atk_text_get_text_at_offset</link>     (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-text-before-offset">atk_text_get_text_before_offset</link> (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-caret-offset">atk_text_get_caret_offset</link>       (<link linkend="AtkText">AtkText</link> *text);
void        <link linkend="atk-text-get-character-extents">atk_text_get_character_extents</link>  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);
<link linkend="AtkAttributeSet">AtkAttributeSet</link>* <link linkend="atk-text-get-run-attributes">atk_text_get_run_attributes</link>
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="AtkAttributeSet">AtkAttributeSet</link>* <link linkend="atk-text-get-default-attributes">atk_text_get_default_attributes</link>
                                            (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-character-count">atk_text_get_character_count</link>    (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-offset-at-point">atk_text_get_offset_at_point</link>    (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);
<link linkend="gint">gint</link>        <link linkend="atk-text-get-n-selections">atk_text_get_n_selections</link>       (<link linkend="AtkText">AtkText</link> *text);
<link linkend="gchar">gchar</link>*      <link linkend="atk-text-get-selection">atk_text_get_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-add-selection">atk_text_add_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-remove-selection">atk_text_remove_selection</link>       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-set-selection">atk_text_set_selection</link>          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);
<link linkend="gboolean">gboolean</link>    <link linkend="atk-text-set-caret-offset">atk_text_set_caret_offset</link>       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);
void        <link linkend="atk-attribute-set-free">atk_attribute_set_free</link>          (<link linkend="AtkAttributeSet">AtkAttributeSet</link> *attrib_set);
<link linkend="AtkTextAttribute">AtkTextAttribute</link> <link linkend="atk-text-attribute-register">atk_text_attribute_register</link>
                                            (const <link linkend="gchar">gchar</link> *name);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-text-attribute-get-name">atk_text_attribute_get_name</link>
                                            (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr);
<link linkend="AtkTextAttribute">AtkTextAttribute</link> <link linkend="atk-text-attribute-for-name">atk_text_attribute_for_name</link>
                                            (const <link linkend="gchar">gchar</link> *name);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-text-attribute-get-value">atk_text_attribute_get_value</link>
                                            (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr,
                                             <link linkend="gint">gint</link> index);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
<link linkend="AtkText">AtkText</link> should be implemented by <link linkend="AtkObjects">AtkObjects</link> on behalf of widgets that
have text content which is either attributed or otherwise non-trivial.
<link linkend="AtkObjects">AtkObjects</link> whose text content is simple, unattributed, and very brief
may expose that content via <link linkend="atk-object-get-name">atk_object_get_name</link> instead; however if the
text is editable, multi-line, typically longer than three or four words,
attributed, selectable, or if the object already uses the 'name' ATK
property for other information, the <link linkend="AtkText">AtkText</link> interface should be used
to expose the text content.  In the case of editable text content,
<link linkend="AtkEditableText">AtkEditableText</link> (a subtype of the <link linkend="AtkText">AtkText</link> interface) should be
implemented instead.
</para>
<para>
<link linkend="AtkText">AtkText</link> provides not only traversal facilities and change notification
for text content, but also caret tracking and glyph bounding box
calculations.  Note that the text strings are exposed as UTF-8, and are
therefore potentially multi-byte, and caret-to-byte offset mapping makes
no assumptions about the character length; also bounding box
glyph-to-offset mapping may be complex for languages which use ligatures.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkText">struct AtkText</title>
<programlisting>struct AtkText;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkTextIface">struct AtkTextIface</title>
<programlisting>struct AtkTextIface
{
  GTypeInterface parent;

  gchar*         (* get_text)                     (AtkText          *text,
                                                   gint             start_offset,
                                                   gint             end_offset);
  gchar*         (* get_text_after_offset)        (AtkText          *text,
                                                   gint             offset,
                                                   AtkTextBoundary  boundary_type,
						   gint             *start_offset,
						   gint             *end_offset);
  gchar*         (* get_text_at_offset)           (AtkText          *text,
                                                   gint             offset,
                                                   AtkTextBoundary  boundary_type,
						   gint             *start_offset,
						   gint             *end_offset);
  gunichar       (* get_character_at_offset)      (AtkText          *text,
                                                   gint             offset);
  gchar*         (* get_text_before_offset)       (AtkText          *text,
                                                   gint             offset,
                                                   AtkTextBoundary  boundary_type,
 						   gint             *start_offset,
						   gint             *end_offset);
  gint           (* get_caret_offset)             (AtkText          *text);
  AtkAttributeSet* (* get_run_attributes)         (AtkText	    *text,
						   gint	  	    offset,
						   gint             *start_offset,
						   gint	 	    *end_offset);
  AtkAttributeSet* (* get_default_attributes)     (AtkText	    *text);
  void           (* get_character_extents)        (AtkText          *text,
                                                   gint             offset,
                                                   gint             *x,
                                                   gint             *y,
                                                   gint             *width,
                                                   gint             *height,
                                                   AtkCoordType	    coords);
  gint           (* get_character_count)          (AtkText          *text);
  gint           (* get_offset_at_point)          (AtkText          *text,
                                                   gint             x,
                                                   gint             y,
                                                   AtkCoordType	    coords);
  gint		 (* get_n_selections)		  (AtkText          *text);
  gchar*         (* get_selection)	          (AtkText          *text,
						   gint		    selection_num,
						   gint		    *start_offset,
						   gint		    *end_offset);
  gboolean       (* add_selection)		  (AtkText          *text,
						   gint		    start_offset,
						   gint		    end_offset);
  gboolean       (* remove_selection)		  (AtkText          *text,
						   gint             selection_num);
  gboolean       (* set_selection)		  (AtkText          *text,
						   gint		    selection_num,
						   gint		    start_offset,
						   gint		    end_offset);
  gboolean       (* set_caret_offset)             (AtkText          *text,
                                                   gint             offset);

  /*
   * signal handlers
   */
  void		 (* text_changed)                 (AtkText          *text,
                                                   gint             position,
                                                   gint             length);
  void           (* text_caret_moved)             (AtkText          *text,
                                                   gint             location);
  void           (* text_selection_changed)       (AtkText          *text);

  AtkFunction    pad1;
  AtkFunction    pad2;
  AtkFunction    pad3;
  AtkFunction    pad4;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkTextBoundary">enum AtkTextBoundary</title>
<programlisting>typedef enum {
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;
</programlisting>
<para>
Text boundary types used for specifying boundaries for regions of text</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkAttribute">struct AtkAttribute</title>
<programlisting>struct AtkAttribute {
  gchar* name;
  gchar* value;
};
</programlisting>
<para>
A string name/value pair representing a text attribute.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="gchar">gchar</link> *<structfield>name</structfield></entry>
<entry> The attribute name. Call <link linkend="atk-text-attr-get-name">atk_text_attr_get_name</link>()
</entry>
</row>
<row>
<entry><link linkend="gchar">gchar</link> *<structfield>value</structfield></entry>
<entry> the value of the attribute, represented as a string. 
Call <link linkend="atk-text-attr-get-value">atk_text_attr_get_value</link>() for those which are strings.
For values which are numbers, the string representation of the number 
is in value.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkAttributeSet">AtkAttributeSet</title>
<programlisting>typedef GSList AtkAttributeSet;
</programlisting>
<para>
This is a singly-linked list (a <link linkend="GSList">GSList</link>) of <link linkend="AtkAttribute">AtkAttribute</link>. It is
used by <link linkend="atk-text-get-run-attributes">atk_text_get_run_attributes</link>(), <link linkend="atk-text-get-default-attributes">atk_text_get_default_attributes</link>()
and <link linkend="atk-editable-text-set-run-attributes">atk_editable_text_set_run_attributes</link>()</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkTextAttribute">enum AtkTextAttribute</title>
<programlisting>typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;
</programlisting>
<para>
Describes the text attributes supported</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>ATK_TEXT_ATTR_INVALID</literal></entry>
<entry> Invalid attribute
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_LEFT_MARGIN</literal></entry>
<entry> The pixel width of the left margin
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_RIGHT_MARGIN</literal></entry>
<entry> The pixel width of the right margin
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_INDENT</literal></entry>
<entry> The number of pixels that the text is indented
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_INVISIBLE</literal></entry>
<entry> Either "true" or "false" indicating whether text is visible or not
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_EDITABLE</literal></entry>
<entry> Either "true" or "false" indicating whether text is editable or not
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_PIXELS_ABOVE_LINES</literal></entry>
<entry> Pixels of blank space to leave above each newline-terminated line. 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_PIXELS_BELOW_LINES</literal></entry>
<entry> Pixels of blank space to leave below each newline-terminated line.
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP</literal></entry>
<entry> Pixels of blank space to leave between wrapped lines inside the same newline-terminated line (paragraph).
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_BG_FULL_HEIGHT</literal></entry>
<entry> "true" or "false" whether to make the background color for each character the height of the highest font used on the current line, or the height of the font used for the current character.
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_RISE</literal></entry>
<entry> Number of pixels that the characters are risen above the baseline
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_UNDERLINE</literal></entry>
<entry> "none", "single", "double" or "low"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_STRIKETHROUGH</literal></entry>
<entry> "true" or "false" whether the text is strikethrough 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_SIZE</literal></entry>
<entry> The size of the characters. 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_SCALE</literal></entry>
<entry> The scale of the characters. The value is a string representation of a double 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_WEIGHT</literal></entry>
<entry> The weight of the characters.
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_LANGUAGE</literal></entry>
<entry> The language used
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_FAMILY_NAME</literal></entry>
<entry> The font family name
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_BG_COLOR</literal></entry>
<entry> The background color. The value is an RGB value of the format "<literal>u</literal>,<literal>u</literal>,<literal>u</literal>"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_FG_COLOR</literal></entry>
<entry>The foreground color. The value is an RGB value of the format "<literal>u</literal>,<literal>u</literal>,<literal>u</literal>"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_BG_STIPPLE</literal></entry>
<entry> "true" if a <link linkend="GdkBitmap">GdkBitmap</link> is set for stippling the background color.
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_FG_STIPPLE</literal></entry>
<entry> "true" if a <link linkend="GdkBitmap">GdkBitmap</link> is set for stippling the foreground color.
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_WRAP_MODE</literal></entry>
<entry> The wrap mode of the text, if any. Values are "none", "char" or "word" 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_DIRECTION</literal></entry>
<entry> The direction of the text, if set. Values are "none", "ltr" or "rtl" 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_JUSTIFICATION</literal></entry>
<entry> The justification of the text, if set. Values are "left", "right", "center" or "fill" 
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_STRETCH</literal></entry>
<entry> The stretch of the text, if set. Values are "ultra_condensed", "extra_condensed", "condensed", "semi_condensed", "normal", "semi_expanded", "expanded", "extra_expanded" or "ultra_expanded"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_VARIANT</literal></entry>
<entry> The capitalization variant of the text, if set. Values are "normal" or "small_caps"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_STYLE</literal></entry>
<entry> The slant style of the text, if set. Values are "normal", "oblique" or "italic"
</entry>
</row>
<row>
<entry><literal>ATK_TEXT_ATTR_LAST_DEFINED</literal></entry>
<entry> not a valid text attribute, used for finding end of enumeration
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text">atk_text_get_text ()</title>
<programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text               (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Gets the specified text.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> start position
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> end position
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the text from <parameter>start_offset</parameter> up to, but not including <parameter>end_offset</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-at-offset">atk_text_get_character_at_offset ()</title>
<programlisting><link linkend="gunichar">gunichar</link>    atk_text_get_character_at_offset
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);</programlisting>
<para>
Gets the specified text.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the character at <parameter>offset</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-after-offset">atk_text_get_text_after_offset ()</title>
<programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_after_offset  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character after the 
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start after the offset to the next word start.
</para>
<para>
The returned string will contain the word after the offset if the offset 
is inside a word or if the offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end at or after the offset to the next work end.
</para>
<para>
The returned string will contain the word after the offset if the offset
is inside a word and will contain the word after the word after the offset
if the offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start after the offset to the next sentence
start.
</para>
<para>
The returned string will contain the sentence after the offset if the offset
is inside a sentence or if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end at or after the offset to the next sentence end.
</para>
<para>
The returned string will contain the sentence after the offset if the offset
is inside a sentence and will contain the sentence after the sentence
after the offset if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start after the offset to the next line start.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end at or after the offset to the next line start.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><parameter>boundary_type</parameter>&nbsp;:</entry>
<entry> An <link linkend="AtkTextBoundary">AtkTextBoundary</link>
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the start offset of the returned string.
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the end offset of the returned string.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the text after <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-at-offset">atk_text_get_text_at_offset ()</title>
<programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_at_offset     (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character at the
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start at or before the offset to the word start after 
the offset.
</para>
<para>
The returned string will contain the word at the offset if the offset
is inside a word and will contain the word before the offset if the 
offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end before the offset to the word end at or after the
offset.
</para>
<para>
The returned string will contain the word at the offset if the offset
is inside a word and will contain the word after to the offset if the 
offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start at or before the offset to the sentence
start after the offset.
</para>
<para>
The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence before the offset 
if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end before the offset to the sentence end at or
after the offset.
</para>
<para>
The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence after the offset 
if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start at or before the offset to the line
start after the offset.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end before the offset to the line end at or after
the offset.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><parameter>boundary_type</parameter>&nbsp;:</entry>
<entry> An <link linkend="AtkTextBoundary">AtkTextBoundary</link>
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the start offset of the returned string.
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the end offset of the returned string.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the text at <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-text-before-offset">atk_text_get_text_before_offset ()</title>
<programlisting><link linkend="gchar">gchar</link>*      atk_text_get_text_before_offset (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="AtkTextBoundary">AtkTextBoundary</link> boundary_type,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the specified text.
</para>
<para>
If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character before the
offset is returned.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start before the word start before the offset to 
the word start before the offset.
</para>
<para>
The returned string will contain the word before the offset if the offset
is inside a word and will contain the word before the word before the 
offset if the offset is not inside a word.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_WORD_END the returned string
is from the word end before the word end at or before the offset to the 
word end at or before the offset.
</para>
<para>
The returned string will contain the word before the offset if the offset
is inside a word or if the offset is not inside a word.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start before the sentence start before 
the offset to the sentence start before the offset.
</para>
<para>
The returned string will contain the sentence before the offset if the 
offset is inside a sentence and will contain the sentence before the 
sentence before the offset if the offset is not inside a sentence.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_SENTENCE_END the returned string
is from the sentence end before the sentence end at or before the offset to 
the sentence end at or before the offset.
</para>
<para>
The returned string will contain the sentence before the offset if the 
offset is inside a sentence or if the offset is not inside a sentence.
</para>
<para>
If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start before the line start ar or before the offset 
to the line start ar or before the offset.
</para>
<para>
If the boundary_type is ATK_TEXT_BOUNDARY_LINE_END the returned string
is from the line end before the line end before the offset to the 
line end before the offset.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><parameter>boundary_type</parameter>&nbsp;:</entry>
<entry> An <link linkend="AtkTextBoundary">AtkTextBoundary</link>
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the start offset of the returned string.
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the end offset of the returned string.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the text before <parameter>offset</parameter> bounded by the specified <parameter>boundary_type</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-caret-offset">atk_text_get_caret_offset ()</title>
<programlisting><link linkend="gint">gint</link>        atk_text_get_caret_offset       (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the offset position of the caret (cursor).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the offset position of the caret (cursor).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-extents">atk_text_get_character_extents ()</title>
<programlisting>void        atk_text_get_character_extents  (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *x,
                                             <link linkend="gint">gint</link> *y,
                                             <link linkend="gint">gint</link> *width,
                                             <link linkend="gint">gint</link> *height,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);</programlisting>
<para>
Given an <parameter>offset</parameter>, the <parameter>x</parameter>, <parameter>y</parameter>, <parameter>width</parameter>, and <parameter>height</parameter> values are filled
appropriately.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> x-position of character
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> y-position of character
</entry></row>
<row><entry align="right"><parameter>width</parameter>&nbsp;:</entry>
<entry> width of character
</entry></row>
<row><entry align="right"><parameter>height</parameter>&nbsp;:</entry>
<entry> height of character
</entry></row>
<row><entry align="right"><parameter>coords</parameter>&nbsp;:</entry>
<entry> specify whether coordinates are relative to the screen or widget window 
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-run-attributes">atk_text_get_run_attributes ()</title>
<programlisting><link linkend="AtkAttributeSet">AtkAttributeSet</link>* atk_text_get_run_attributes
                                            (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Creates an <link linkend="AtkAttributeSet">AtkAttributeSet</link> which consists of the attributes explicitly
set at the position <parameter>offset</parameter> in the text. <parameter>start_offset</parameter> and <parameter>end_offset</parameter> are
set to the start and end of the range around <parameter>offset</parameter> where the attributes are
invariant. See the enum AtkTextAttribute for types of text attributes that 
can be returned. Note that other attributes may also be returned.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> the offset at which to get the attributes
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the address to put the start offset of the range
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the address to put the end offset of the range
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkAttributeSet">AtkAttributeSet</link> which contains the attributes explicitly set
at <parameter>offset</parameter>. This <link linkend="AtkAttributeSet">AtkAttributeSet</link> should be freed by a call to
<link linkend="atk-attribute-set-free">atk_attribute_set_free</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-default-attributes">atk_text_get_default_attributes ()</title>
<programlisting><link linkend="AtkAttributeSet">AtkAttributeSet</link>* atk_text_get_default_attributes
                                            (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Creates an <link linkend="AtkAttributeSet">AtkAttributeSet</link> which consists of the default values of
attributes for the text. See the enum AtkTextAttribute for types of text 
attributes that can be returned. Note that other attributes may also be 
returned.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkAttributeSet">AtkAttributeSet</link> which contains the default values of attributes.
at <parameter>offset</parameter>. This <link linkend="AtkAttributeSet">AtkAttributeSet</link> should be freed by a call to
<link linkend="atk-attribute-set-free">atk_attribute_set_free</link>().
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-character-count">atk_text_get_character_count ()</title>
<programlisting><link linkend="gint">gint</link>        atk_text_get_character_count    (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the character count.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the number of characters.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-offset-at-point">atk_text_get_offset_at_point ()</title>
<programlisting><link linkend="gint">gint</link>        atk_text_get_offset_at_point    (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> x,
                                             <link linkend="gint">gint</link> y,
                                             <link linkend="AtkCoordType">AtkCoordType</link> coords);</programlisting>
<para>
Gets the offset of the character located at coordinates <parameter>x</parameter> and <parameter>y</parameter>. <parameter>x</parameter> and <parameter>y</parameter>
are interpreted as being relative to the screen or this widget's window
depending on <parameter>coords</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry> screen x-position of character
</entry></row>
<row><entry align="right"><parameter>y</parameter>&nbsp;:</entry>
<entry> screen y-position of character
</entry></row>
<row><entry align="right"><parameter>coords</parameter>&nbsp;:</entry>
<entry> specify whether coordinates are relative to the screen or
widget window 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the offset to the character which is located at
the specified <parameter>x</parameter> and <parameter>y</parameter> coordinates.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-n-selections">atk_text_get_n_selections ()</title>
<programlisting><link linkend="gint">gint</link>        atk_text_get_n_selections       (<link linkend="AtkText">AtkText</link> *text);</programlisting>
<para>
Gets the number of selected regions.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> The number of selected regions, or -1 if a failure
  occurred.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-get-selection">atk_text_get_selection ()</title>
<programlisting><link linkend="gchar">gchar</link>*      atk_text_get_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> *start_offset,
                                             <link linkend="gint">gint</link> *end_offset);</programlisting>
<para>
Gets the text from the specified selection.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>selection_num</parameter>&nbsp;:</entry>
<entry> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> passes back the start position of the selected region
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> passes back the end position of the selected region
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the selected text.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-add-selection">atk_text_add_selection ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_text_add_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Adds a selection bounded by the specified offsets.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the start position of the selected region
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the end position of the selected region
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-remove-selection">atk_text_remove_selection ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_text_remove_selection       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num);</programlisting>
<para>
Removes the specified selection.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>selection_num</parameter>&nbsp;:</entry>
<entry> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-set-selection">atk_text_set_selection ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_text_set_selection          (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> selection_num,
                                             <link linkend="gint">gint</link> start_offset,
                                             <link linkend="gint">gint</link> end_offset);</programlisting>
<para>
Changes the start and end offset of the specified selection.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>selection_num</parameter>&nbsp;:</entry>
<entry> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</entry></row>
<row><entry align="right"><parameter>start_offset</parameter>&nbsp;:</entry>
<entry> the new start position of the selection
</entry></row>
<row><entry align="right"><parameter>end_offset</parameter>&nbsp;:</entry>
<entry> the new end position of the selection
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-set-caret-offset">atk_text_set_caret_offset ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    atk_text_set_caret_offset       (<link linkend="AtkText">AtkText</link> *text,
                                             <link linkend="gint">gint</link> offset);</programlisting>
<para>
Sets the caret (cursor) position to the specified <parameter>offset</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkText">AtkText</link>
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> position
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> <literal>TRUE</literal> if success, <literal>FALSE</literal> otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-attribute-set-free">atk_attribute_set_free ()</title>
<programlisting>void        atk_attribute_set_free          (<link linkend="AtkAttributeSet">AtkAttributeSet</link> *attrib_set);</programlisting>
<para>
Frees the memory used by an <link linkend="AtkAttributeSet">AtkAttributeSet</link>, including all its
<link linkend="AtkAttributes">AtkAttributes</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>attrib_set</parameter>&nbsp;:</entry>
<entry> The <link linkend="AtkAttributeSet">AtkAttributeSet</link> to free
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-register">atk_text_attribute_register ()</title>
<programlisting><link linkend="AtkTextAttribute">AtkTextAttribute</link> atk_text_attribute_register
                                            (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Associate <parameter>name</parameter> with a new <link linkend="AtkTextAttribute">AtkTextAttribute</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a name string
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkTextAttribute">AtkTextAttribute</link> associated with <parameter>name</parameter>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-get-name">atk_text_attribute_get_name ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_text_attribute_get_name
                                            (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr);</programlisting>
<para>
Gets the name corresponding to the <link linkend="AtkTextAttribute">AtkTextAttribute</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>attr</parameter>&nbsp;:</entry>
<entry> The <link linkend="AtkTextAttribute">AtkTextAttribute</link> whose name is required
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a string containing the name; this string should not be freed
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-for-name">atk_text_attribute_for_name ()</title>
<programlisting><link linkend="AtkTextAttribute">AtkTextAttribute</link> atk_text_attribute_for_name
                                            (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Get the <link linkend="AtkTextAttribute">AtkTextAttribute</link> type corresponding to a text attribute name.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a string which is the (non-localized) name of an ATK text attribute.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the <link linkend="AtkTextAttribute">AtkTextAttribute</link> enumerated type corresponding to the specified
name,
         or <link linkend="ATK-TEXT-ATTRIBUTE-INVALID-CAPS">ATK_TEXT_ATTRIBUTE_INVALID</link> if no matching text attribute is found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-text-attribute-get-value">atk_text_attribute_get_value ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_text_attribute_get_value
                                            (<link linkend="AtkTextAttribute">AtkTextAttribute</link> attr,
                                             <link linkend="gint">gint</link> index);</programlisting>
<para>
Gets the value for the index of the <link linkend="AtkTextAttribute">AtkTextAttribute</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>attr</parameter>&nbsp;:</entry>
<entry> The <link linkend="AtkTextAttribute">AtkTextAttribute</link> for which a value is required
</entry></row>
<row><entry align="right"><parameter>index</parameter>&nbsp;:</entry>
<entry> The index of the required value
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a string containing the value; this string should not be freed;
NULL is returned if there are no values maintained for the attr value. 
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
