<refentry id="atk-AtkObject">
<refmeta>
<refentrytitle>AtkObject</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>ATK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>AtkObject</refname><refpurpose>
The base object class for the Accessibility Toolkit API.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="AtkObject">AtkObject</link>;
enum        <link linkend="AtkRole">AtkRole</link>;
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-role-register">atk_role_register</link>               (const <link linkend="gchar">gchar</link> *name);
enum        <link linkend="AtkLayer">AtkLayer</link>;
struct      <link linkend="AtkImplementor">AtkImplementor</link>;
struct      <link linkend="AtkImplementorIface">AtkImplementorIface</link>;
struct      <link linkend="AtkRelationSet">AtkRelationSet</link>;
struct      <link linkend="AtkPropertyValues">AtkPropertyValues</link>;
<link linkend="gboolean">gboolean</link>    (<link linkend="AtkFunction">*AtkFunction</link>)                  (<link linkend="gpointer">gpointer</link> data);
void        (<link linkend="AtkPropertyChangeHandler">*AtkPropertyChangeHandler</link>)     (<link linkend="AtkObject">AtkObject</link>*,
                                             <link linkend="AtkPropertyValues">AtkPropertyValues</link>*);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-implementor-ref-accessible">atk_implementor_ref_accessible</link>  (<link linkend="AtkImplementor">AtkImplementor</link> *implementor);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-object-get-name">atk_object_get_name</link>   (<link linkend="AtkObject">AtkObject</link> *accessible);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-object-get-description">atk_object_get_description</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-object-get-parent">atk_object_get_parent</link>           (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-n-accessible-children">atk_object_get_n_accessible_children</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkObject">AtkObject</link>*  <link linkend="atk-object-ref-accessible-child">atk_object_ref_accessible_child</link> (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gint">gint</link> i);
<link linkend="AtkRelationSet">AtkRelationSet</link>* <link linkend="atk-object-ref-relation-set">atk_object_ref_relation_set</link> (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkLayer">AtkLayer</link>    <link linkend="atk-object-get-layer">atk_object_get_layer</link>            (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-mdi-zorder">atk_object_get_mdi_zorder</link>       (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-object-get-role">atk_object_get_role</link>             (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="AtkStateSet">AtkStateSet</link>* <link linkend="atk-object-ref-state-set">atk_object_ref_state_set</link>       (<link linkend="AtkObject">AtkObject</link> *accessible);
<link linkend="gint">gint</link>        <link linkend="atk-object-get-index-in-parent">atk_object_get_index_in_parent</link>  (<link linkend="AtkObject">AtkObject</link> *accessible);
void        <link linkend="atk-object-set-name">atk_object_set_name</link>             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *name);
void        <link linkend="atk-object-set-description">atk_object_set_description</link>      (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *description);
void        <link linkend="atk-object-set-parent">atk_object_set_parent</link>           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkObject">AtkObject</link> *parent);
void        <link linkend="atk-object-set-role">atk_object_set_role</link>             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkRole">AtkRole</link> role);
<link linkend="guint">guint</link>       <link linkend="atk-object-connect-property-change-handler">atk_object_connect_property_change_handler</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkPropertyChangeHandler">AtkPropertyChangeHandler</link> *handler);
void        <link linkend="atk-object-remove-property-change-handler">atk_object_remove_property_change_handler</link>
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="guint">guint</link> handler_id);
void        <link linkend="atk-object-notify-state-change">atk_object_notify_state_change</link>  (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkState">AtkState</link> state,
                                             <link linkend="gboolean">gboolean</link> value);
void        <link linkend="atk-object-initialize">atk_object_initialize</link>           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gpointer">gpointer</link> data);
G_CONST_RETURN <link linkend="gchar">gchar</link>* <link linkend="atk-role-get-name">atk_role_get_name</link>     (<link linkend="AtkRole">AtkRole</link> role);
<link linkend="AtkRole">AtkRole</link>     <link linkend="atk-role-for-name">atk_role_for_name</link>               (const <link linkend="gchar">gchar</link> *name);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
This class is the primary class for accessibility support via
the Accessibility ToolKit (ATK).  Objects which are instances
of <link linkend="AtkObject">AtkObject</link> (or instances of AtkObject-derived types) are
queried for properties which relate basic (and generic) properties of a
UI component such as name and description.  Instances of <link linkend="AtkObject">AtkObject</link>
may also be queried as to whether they implement other ATK interfaces
(e.g. <link linkend="AtkAction">AtkAction</link>, <link linkend="AtkComponent">AtkComponent</link>, etc.), as appropriate to the role
which a given UI component plays in a user interface.
</para>
<para>All UI components in an application which provide useful
information or services to the user must provide corresponding
<link linkend="AtkObject">AtkObject</link> instances on request (in GTK+, for instance, usually
on a call to #<link linkend="gtk-widget-get-accessible">gtk_widget_get_accessible</link>()), either via ATK support
built into the toolkit for the widget class or ancestor class, or in
the case of custom widgets, if the inherited <link linkend="AtkObject">AtkObject</link> implementation
is insufficient, via instances of a new <link linkend="AtkObject">AtkObject</link> subclass. 
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="AtkObject">struct AtkObject</title>
<programlisting>struct AtkObject
{
  GObject parent;

  gchar *description;
  gchar *name;
  AtkObject *accessible_parent;
  AtkRole role;
  AtkRelationSet *relation_set;
  AtkLayer layer;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkRole">enum AtkRole</title>
<programlisting>typedef enum
{
  ATK_ROLE_INVALID = 0, 
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_PUSH_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_LAST_DEFINED
} AtkRole;
</programlisting>
<para>
Describes the role of an object</para>
<para>
These are the built-in enumerated roles that UI components can have in
ATK.  Other roles may be added at runtime, so an AtkRole >=
ATK_ROLE_LAST_DEFINED is not necessarily an error.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>ATK_ROLE_INVALID</literal></entry>
<entry> Invalid role
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ACCEL_LABEL</literal></entry>
<entry> A label which represents an accelerator
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ALERT</literal></entry>
<entry> An object which is an alert to the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ANIMATION</literal></entry>
<entry> An object which is an animated image
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ARROW</literal></entry>
<entry> An arrow in one of the four cardinal directions
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_CALENDAR</literal></entry>
<entry>  An object that displays a calendar and allows the user to select a date
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_CANVAS</literal></entry>
<entry> An object that can be drawn into and is used to trap events
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_CHECK_BOX</literal></entry>
<entry> A choice that can be checked or unchecked and provides a separate indicator for the current state
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_CHECK_MENU_ITEM</literal></entry>
<entry> A menu item with a check box
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_COLOR_CHOOSER</literal></entry>
<entry> A specialized dialog that lets the user choose a color
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_COLUMN_HEADER</literal></entry>
<entry> The header for a column of data
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_COMBO_BOX</literal></entry>
<entry> A list of choices the user can select from
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DATE_EDITOR</literal></entry>
<entry> An object whose purpose is to allow a user to edit a date
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DESKTOP_ICON</literal></entry>
<entry> An inconifed internal frame within a DESKTOP_PANE
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DESKTOP_FRAME</literal></entry>
<entry> A pane that supports internal frames and iconified versions of those internal frames
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DIAL</literal></entry>
<entry> An object whose purpose is to allow a user to set a value
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DIALOG</literal></entry>
<entry> A top level window with title bar and a border
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DIRECTORY_PANE</literal></entry>
<entry> A pane that allows the user to navigate through and select the contents of a directory
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_DRAWING_AREA</literal></entry>
<entry> An object used for drawing custom user interface elements
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_FILE_CHOOSER</literal></entry>
<entry> A specialized dialog that lets the user choose a file
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_FILLER</literal></entry>
<entry> A object that fills up space in a user interface
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_FONT_CHOOSER</literal></entry>
<entry> A specialized dialog that lets the user choose a font
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_FRAME</literal></entry>
<entry> A top level window with a title bar, border, menubar, etc.
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_GLASS_PANE</literal></entry>
<entry> A pane that is guaranteed to be painted on top of all panes beneath it
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_HTML_CONTAINER</literal></entry>
<entry> A document container for HTML, whose children represent the document content
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ICON</literal></entry>
<entry> A small fixed size picture, typically used to decorate components
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_IMAGE</literal></entry>
<entry> An object whose primary purpose is to display an image
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_INTERNAL_FRAME</literal></entry>
<entry> A frame-like object that is clipped by a desktop pane
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_LABEL</literal></entry>
<entry> An object used to present an icon or short string in an interface
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_LAYERED_PANE</literal></entry>
<entry> A specialized pane that allows its children to be drawn in layers, providing a form of stacking order
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_LIST</literal></entry>
<entry> An object that presents a list of objects to the user and allows the user to select one or more of them 
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_LIST_ITEM</literal></entry>
<entry> An object that represents an element of a list 
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_MENU</literal></entry>
<entry> An object usually found inside a menu bar that contains a list of actions the user can choose from
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_MENU_BAR</literal></entry>
<entry> An object usually drawn at the top of the primary dialog box of an application that contains a list of menus the user can choose from 
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_MENU_ITEM</literal></entry>
<entry> An object usually contained in a menu that presents an action the user can choose
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_OPTION_PANE</literal></entry>
<entry> A specialized pane whose primary use is inside a DIALOG
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PAGE_TAB</literal></entry>
<entry> An object that is a child of a page tab list
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PAGE_TAB_LIST</literal></entry>
<entry> An object that presents a series of panels (or page tabs), one at a time, through some mechanism provided by the object 
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PANEL</literal></entry>
<entry> A generic container that is often used to group objects
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PASSWORD_TEXT</literal></entry>
<entry> A text object uses for passwords, or other places where the text content is not shown visibly to the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_POPUP_MENU</literal></entry>
<entry> A temporary window that is usually used to offer the user a list of choices, and then hides when the user selects one of those choices
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PROGRESS_BAR</literal></entry>
<entry> An object used to indicate how much of a task has been completed
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_PUSH_BUTTON</literal></entry>
<entry> An object the user can manipulate to tell the application to do something
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_RADIO_BUTTON</literal></entry>
<entry> A specialized check box that will cause other radio buttons in the same group to become unchecked when this one is checked
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_RADIO_MENU_ITEM</literal></entry>
<entry> A check menu item which belongs to a group. At each instant exactly one of the radio menu items from a group is selected
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ROOT_PANE</literal></entry>
<entry> A specialized pane that has a glass pane and a layered pane as its children
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_ROW_HEADER</literal></entry>
<entry> The header for a row of data
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SCROLL_BAR</literal></entry>
<entry> An object usually used to allow a user to incrementally view a large amount of data.
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SCROLL_PANE</literal></entry>
<entry> An object that allows a user to incrementally view a large amount of information
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SEPARATOR</literal></entry>
<entry> An object usually contained in a menu to provide a visible and logical separation of the contents in a menu
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SLIDER</literal></entry>
<entry> An object that allows the user to select from a bounded range
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SPLIT_PANE</literal></entry>
<entry> A specialized panel that presents two other panels at the same time
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_SPIN_BUTTON</literal></entry>
<entry> An object used to get an integer or floating point number from the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_STATUSBAR</literal></entry>
<entry> An object which reports messages of minor importance to the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TABLE</literal></entry>
<entry> An object used to represent information in terms of rows and columns
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TABLE_CELL</literal></entry>
<entry> A cell in a table
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TABLE_COLUMN_HEADER</literal></entry>
<entry> The header for a column of a table
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TABLE_ROW_HEADER</literal></entry>
<entry> The header for a row of a table
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TEAR_OFF_MENU_ITEM</literal></entry>
<entry> A menu item used to tear off and reattach its menu
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TERMINAL</literal></entry>
<entry> An object that represents an accessible terminal
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TEXT</literal></entry>
<entry> An object that presents text to the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TOGGLE_BUTTON</literal></entry>
<entry> A specialized push button that can be checked or unchecked, but does not provide a separate indicator for the current state
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TOOL_BAR</literal></entry>
<entry> A bar or palette usually composed of push buttons or toggle buttons
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TOOL_TIP</literal></entry>
<entry> An object that provides information about another object
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TREE</literal></entry>
<entry> An object used to represent hierarchical information to the user
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_TREE_TABLE</literal></entry>
<entry> An object capable of expanding and collapsing rows as well as showing multiple columns of data
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_UNKNOWN</literal></entry>
<entry> The object contains some Accessible information, but its role is not known
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_VIEWPORT</literal></entry>
<entry> An object usually used in a scroll pane
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_WINDOW</literal></entry>
<entry> A top level window with no title or border
</entry>
</row>
<row>
<entry><literal>ATK_ROLE_LAST_DEFINED</literal></entry>
<entry> not a valid role, used for finding end of enumeration
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-role-register">atk_role_register ()</title>
<programlisting><link linkend="AtkRole">AtkRole</link>     atk_role_register               (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Registers the role specified by <parameter>name</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a character string describing the new role.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkRole">AtkRole</link> for the new role.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkLayer">enum AtkLayer</title>
<programlisting>typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY
} AtkLayer;
</programlisting>
<para>
Describes the layer of a component</para>
<para>
These enumerated "layer values" are used when determining which UI
rendering layer a component is drawn into, which can help in making
determinations of when components occlude one another.
</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>ATK_LAYER_INVALID</literal></entry>
<entry> The object does not have a layer
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_BACKGROUND</literal></entry>
<entry> This layer is reserved for the desktop background
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_CANVAS</literal></entry>
<entry> This layer is used for Canvas components
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_WIDGET</literal></entry>
<entry> This layer is normally used for components
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_MDI</literal></entry>
<entry> This layer is used for layered components
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_POPUP</literal></entry>
<entry> This layer is used for popup components, such as menus
</entry>
</row>
<row>
<entry><literal>ATK_LAYER_OVERLAY</literal></entry>
<entry> This layer is reserved for future use.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkImplementor">struct AtkImplementor</title>
<programlisting>struct AtkImplementor;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkImplementorIface">struct AtkImplementorIface</title>
<programlisting>struct AtkImplementorIface
{
  GTypeInterface parent;

  AtkObject*   (*ref_accessible) (AtkImplementor *implementor);
};
</programlisting>
<para>
This interface provides an alternative means of obtaining AtkObjects
from a GOBject instance, and for querying whether a GObject instance
provides ATK functionality.
</para></refsect2>
<refsect2>
<title><anchor id="AtkRelationSet">struct AtkRelationSet</title>
<programlisting>struct AtkRelationSet
{
  GObject parent;

  GPtrArray *relations;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkPropertyValues">struct AtkPropertyValues</title>
<programlisting>struct AtkPropertyValues
{
  const gchar  *property_name;
  GValue old_value;
  GValue new_value;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="AtkFunction">AtkFunction ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    (*AtkFunction)                  (<link linkend="gpointer">gpointer</link> data);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="AtkPropertyChangeHandler">AtkPropertyChangeHandler ()</title>
<programlisting>void        (*AtkPropertyChangeHandler)     (<link linkend="AtkObject">AtkObject</link>*,
                                             <link linkend="AtkPropertyValues">AtkPropertyValues</link>*);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>Param1</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>Param2</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-implementor-ref-accessible">atk_implementor_ref_accessible ()</title>
<programlisting><link linkend="AtkObject">AtkObject</link>*  atk_implementor_ref_accessible  (<link linkend="AtkImplementor">AtkImplementor</link> *implementor);</programlisting>
<para>
Gets a reference to an object's <link linkend="AtkObject">AtkObject</link> implementation, if
the object implements <link linkend="AtkObjectIface">AtkObjectIface</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>implementor</parameter>&nbsp;:</entry>
<entry> The <link linkend="GObject">GObject</link> instance which should implement <link linkend="AtkImplementorIface">AtkImplementorIface</link>
if a non-null return value is required.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a reference to an object's <link linkend="AtkObject">AtkObject</link> implementation
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-name">atk_object_get_name ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_object_get_name   (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible name of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a character string representing the accessible name of the object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-description">atk_object_get_description ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_object_get_description
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible description of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a character string representing the accessible description
of the accessible.

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-parent">atk_object_get_parent ()</title>
<programlisting><link linkend="AtkObject">AtkObject</link>*  atk_object_get_parent           (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the accessible parent of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="AtkObject">AtkObject</link> representing the accessible parent of the accessible
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-n-accessible-children">atk_object_get_n_accessible_children ()</title>
<programlisting><link linkend="gint">gint</link>        atk_object_get_n_accessible_children
                                            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the number of accessible children of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an integer representing the number of accessible children
of the accessible.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-accessible-child">atk_object_ref_accessible_child ()</title>
<programlisting><link linkend="AtkObject">AtkObject</link>*  atk_object_ref_accessible_child (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gint">gint</link> i);</programlisting>
<para>
Gets a reference to the specified accessible child of the object.
The accessible children are 0-based so the first accessible child is
at index 0, the second at index 1 and so on.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>i</parameter>&nbsp;:</entry>
<entry> a gint representing the position of the child, starting from 0
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkObject">AtkObject</link> representing the specified accessible child
of the accessible.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-relation-set">atk_object_ref_relation_set ()</title>
<programlisting><link linkend="AtkRelationSet">AtkRelationSet</link>* atk_object_ref_relation_set (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the <link linkend="AtkRelationSet">AtkRelationSet</link> associated with the object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkRelationSet">AtkRelationSet</link> representing the relation set of the object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-layer">atk_object_get_layer ()</title>
<programlisting><link linkend="AtkLayer">AtkLayer</link>    atk_object_get_layer            (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the layer of the accessible.
DEPRECATED: use atk_component_get_layer instead!</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkLayer">AtkLayer</link> which is the layer of the accessible
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-mdi-zorder">atk_object_get_mdi_zorder ()</title>
<programlisting><link linkend="gint">gint</link>        atk_object_get_mdi_zorder       (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the zorder of the accessible. The value G_MININT will be returned 
if the layer of the accessible is not ATK_LAYER_MDI.
DEPRECATED: use atk_component_get_mdi_zorder instead!</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a gint which is the zorder of the accessible, i.e. the depth at 
which the component is shown in relation to other components in the same 
container.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-role">atk_object_get_role ()</title>
<programlisting><link linkend="AtkRole">AtkRole</link>     atk_object_get_role             (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the role of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an <link linkend="AtkRole">AtkRole</link> which is the role of the accessible
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-ref-state-set">atk_object_ref_state_set ()</title>
<programlisting><link linkend="AtkStateSet">AtkStateSet</link>* atk_object_ref_state_set       (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets a reference to the state set of the accessible; the caller must
unreference it when it is no longer needed.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a reference to an <link linkend="AtkStateSet">AtkStateSet</link> which is the state
set of the accessible
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-get-index-in-parent">atk_object_get_index_in_parent ()</title>
<programlisting><link linkend="gint">gint</link>        atk_object_get_index_in_parent  (<link linkend="AtkObject">AtkObject</link> *accessible);</programlisting>
<para>
Gets the 0-based index of this accessible in its parent; returns -1 if the
accessible does not have an accessible parent.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> an integer which is the index of the accessible in its parent
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-set-name">atk_object_set_name ()</title>
<programlisting>void        atk_object_set_name             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets the accessible name of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a character string to be set as the accessible name
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-set-description">atk_object_set_description ()</title>
<programlisting>void        atk_object_set_description      (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             const <link linkend="gchar">gchar</link> *description);</programlisting>
<para>
Sets the accessible description of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>description</parameter>&nbsp;:</entry>
<entry> a character string to be set as the accessible description
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-set-parent">atk_object_set_parent ()</title>
<programlisting>void        atk_object_set_parent           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkObject">AtkObject</link> *parent);</programlisting>
<para>
Sets the accessible parent of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link> to be set as the accessible parent
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-set-role">atk_object_set_role ()</title>
<programlisting>void        atk_object_set_role             (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkRole">AtkRole</link> role);</programlisting>
<para>
Sets the role of the accessible.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>role</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkRole">AtkRole</link> to be set as the role
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-connect-property-change-handler">atk_object_connect_property_change_handler ()</title>
<programlisting><link linkend="guint">guint</link>       atk_object_connect_property_change_handler
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkPropertyChangeHandler">AtkPropertyChangeHandler</link> *handler);</programlisting>
<para>
Specifies a function to be called when a property changes value.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>handler</parameter>&nbsp;:</entry>
<entry> a function to be called when a property changes its value
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a <link linkend="guint">guint</link> which is the handler id used in 
<link linkend="atk-object-remove-property-change-handler">atk_object_remove_property_change_handler</link>()
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-remove-property-change-handler">atk_object_remove_property_change_handler ()</title>
<programlisting>void        atk_object_remove_property_change_handler
                                            (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="guint">guint</link> handler_id);</programlisting>
<para>
Removes a property change handler.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>handler_id</parameter>&nbsp;:</entry>
<entry> a guint which identifies the handler to be removed.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-notify-state-change">atk_object_notify_state_change ()</title>
<programlisting>void        atk_object_notify_state_change  (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="AtkState">AtkState</link> state,
                                             <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Emits a state-change signal for the specified state.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> an <link linkend="AtkState">AtkState</link> whose state is changed
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> a gboolean which indicates whether the state is being set on or off
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-object-initialize">atk_object_initialize ()</title>
<programlisting>void        atk_object_initialize           (<link linkend="AtkObject">AtkObject</link> *accessible,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
This function is called when implementing subclasses of <link linkend="AtkObject">AtkObject</link>.
It does initialization required for the new object. It is intended
that this function should called only in the ...<link linkend="new">_new</link>() functions used
to create an instance of a subclass of <link linkend="AtkObject">AtkObject</link></para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>accessible</parameter>&nbsp;:</entry>
<entry> a <link linkend="AtkObject">AtkObject</link>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> a <link linkend="gpointer">gpointer</link> which identifies the object for which the AtkObject was created.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-role-get-name">atk_role_get_name ()</title>
<programlisting>G_CONST_RETURN <link linkend="gchar">gchar</link>* atk_role_get_name     (<link linkend="AtkRole">AtkRole</link> role);</programlisting>
<para>
Gets the description string describing the <link linkend="Roleype">Roleype</link> <parameter>role</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>role</parameter>&nbsp;:</entry>
<entry> The <link linkend="AtkRole">AtkRole</link> whose name is required
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the string describing the AtkRole
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="atk-role-for-name">atk_role_for_name ()</title>
<programlisting><link linkend="AtkRole">AtkRole</link>     atk_role_for_name               (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Get the <link linkend="AtkRole">AtkRole</link> type corresponding to a rolew name.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> a string which is the (non-localized) name of an ATK role.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> the <link linkend="AtkRole">AtkRole</link> enumerated type corresponding to the specified
name,
         or <link linkend="ATK-ROLE-INVALID-CAPS">ATK_ROLE_INVALID</link> if no matching role is found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
See also: <link linkend="AtkObjectFactory">AtkObjectFactory</link>, <link linkend="AtkRegistry">AtkRegistry</link>.
( GTK+ users see also <link linkend="GtkAccessible">GtkAccessible</link>).
</para>
</refsect1>

</refentry>
