# Makefile.in generated by automake 1.7.8 from Makefile.am.
# pango/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/pango
pkglibdir = $(libdir)/pango
pkgincludedir = $(includedir)/pango
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
#am__append_1 = -export-symbols $(srcdir)/pango.def
#am__append_2 = pango-win32res.lo
#am__append_3 = pango-win32res.lo
am__append_4 = pangox.h
am__append_5 = libpangox-1.0.la
am__append_6 = pangoxft.h pango-ot.h
am__append_7 = libpangoxft-1.0.la
am__append_8 = pangoft2.h pango-ot.h
am__append_9 = libpangoft2-1.0.la
#am__append_10 = -export-symbols $(srcdir)/pangoft2.def
#am__append_11 = pangoft2-win32res.lo
#am__append_12 = pangoft2-win32res.lo
#am__append_13 = pangowin32.h
#am__append_14 = libpangowin32-1.0.la
#am__append_15 = -export-symbols $(srcdir)/pangowin32.def
#am__append_16 = pangowin32-win32res.lo
#am__append_17 = pangowin32-win32res.lo
am__append_18 = libpangox-$(PANGO_API_VERSION).la
am__append_19 = libpangoxft-$(PANGO_API_VERSION).la
am__append_20 = libpangoft2-$(PANGO_API_VERSION).la
#am__append_21 = libpangowin32-$(PANGO_API_VERSION).la
ACLOCAL = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run aclocal-1.7 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run tar
AR = ar
AS = as
AUTOCONF = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run autoconf
AUTOHEADER = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run autoheader
AUTOMAKE = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run automake-1.7
AWK = gawk
BUILD_OT_TESTS_FALSE = #
BUILD_OT_TESTS_TRUE = 
CC = i486-TSOL-linux-gnu-gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Os -I/source/Xdialog-2.3.1/include -Wall
CPP = i486-TSOL-linux-gnu-gcc -E
CPPFLAGS = 
CROSS_COMPILING_FALSE = 
CROSS_COMPILING_TRUE = #
CXX = i486-TSOL-linux-gnu-g++
CXXCPP = i486-TSOL-linux-gnu-g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Os
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISABLE_EXPLICIT_DEPS_FALSE = 
DISABLE_EXPLICIT_DEPS_TRUE = #
DLLTOOL = dlltool
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_GTK_DOC_FALSE = 
ENABLE_GTK_DOC_TRUE = #
ENABLE_MAN_FALSE = 
ENABLE_MAN_TRUE = #
EXEEXT = 
F77 = 
FFLAGS = 
FONTCONFIG_CFLAGS = -I/source/Xdialog-2.3.1/include  
FONTCONFIG_LIBS = -L/source/Xdialog-2.3.1/lib -lfontconfig  
FREETYPE_CFLAGS = -I/source/Xdialog-2.3.1/include   -I/source/Xdialog-2.3.1/include/freetype2 -I/source/Xdialog-2.3.1/include
FREETYPE_CONFIG = /source/Xdialog-2.3.1/bin/freetype-config
FREETYPE_LIBS = -L/source/Xdialog-2.3.1/lib -lfontconfig   -L/source/Xdialog-2.3.1/lib -lfreetype -lz
GLIB_CFLAGS = -D_REENTRANT -I/source/Xdialog-2.3.1/include/glib-2.0 -I/source/Xdialog-2.3.1/lib/glib-2.0/include  
GLIB_GENMARSHAL = glib-genmarshal
GLIB_LIBS =  -L/source/Xdialog-2.3.1/lib -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0
GLIB_MKENUMS = glib-mkenums
GOBJECT_QUERY = gobject-query
GTK_DOC_USE_LIBTOOL_FALSE = #
GTK_DOC_USE_LIBTOOL_TRUE = 
HAVE_CXX_FALSE = #
HAVE_CXX_TRUE = 
HAVE_FREETYPE_FALSE = #
HAVE_FREETYPE_TRUE = 
HAVE_INCLUDED_MODULES_FALSE = #
HAVE_INCLUDED_MODULES_TRUE = 
HAVE_USP10_H_FALSE = 
HAVE_USP10_H_TRUE = #
HAVE_WIN32_FALSE = 
HAVE_WIN32_TRUE = #
HAVE_XFT_FALSE = #
HAVE_XFT_TRUE = 
HAVE_X_FALSE = #
HAVE_X_TRUE = 
HTML_DIR = ${datadir}/gtk-doc/html
INCLUDED_FC_MODULES =  $(top_builddir)/modules/basic/libpango-basic-fc.la
INCLUDED_WIN32_MODULES = 
INCLUDED_X_MODULES =  $(top_builddir)/modules/basic/libpango-basic-x.la
INCLUDE_ARABIC_FC_FALSE = 
INCLUDE_ARABIC_FC_TRUE = #
INCLUDE_BASIC_FC_FALSE = #
INCLUDE_BASIC_FC_TRUE = 
INCLUDE_BASIC_WIN32_FALSE = 
INCLUDE_BASIC_WIN32_TRUE = #
INCLUDE_BASIC_X_FALSE = #
INCLUDE_BASIC_X_TRUE = 
INCLUDE_HANGUL_FC_FALSE = 
INCLUDE_HANGUL_FC_TRUE = #
INCLUDE_HEBREW_FC_FALSE = 
INCLUDE_HEBREW_FC_TRUE = #
INCLUDE_INDIC_FC_FALSE = 
INCLUDE_INDIC_FC_TRUE = #
INCLUDE_THAI_FC_FALSE = 
INCLUDE_THAI_FC_TRUE = #
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = -static-libgcc -L/source/Xdialog-2.3.1/lib
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
LT_CURRENT_MINUS_AGE = 0
LT_VERSION_INFO = 399:1:399
MAKEINFO = ${SHELL} /source/gtk/2.4.0/pango-1.4.0/missing --run makeinfo
MS_LIB_AVAILABLE_FALSE = 
MS_LIB_AVAILABLE_TRUE = #
OBJDUMP = objdump
OBJEXT = o
OS_WIN32_FALSE = 
OS_WIN32_TRUE = #
PACKAGE = pango
PACKAGE_BUGREPORT = http://bugzilla.gnome.org/enter_bug.cgi?product=pango
PACKAGE_NAME = pango
PACKAGE_STRING = pango 1.4.0
PACKAGE_TARNAME = pango
PACKAGE_VERSION = 1.4.0
PANGO_API_VERSION = 1.0
PANGO_BINARY_AGE = 400
PANGO_DEBUG_FLAGS = -DG_DISABLE_CAST_CHECKS
PANGO_INTERFACE_AGE = 1
PANGO_MAJOR_VERSION = 1
PANGO_MICRO_VERSION = 0
PANGO_MINOR_VERSION = 4
PANGO_MODULE_VERSION = 1.4.0
PANGO_VERSION = 1.4.0
PATH_SEPARATOR = :
PERL = perl
PKGCONFIG_FREETYPE_LIBS = -L/source/Xdialog-2.3.1/lib -lfontconfig   -L/source/Xdialog-2.3.1/lib -lfreetype -lz
PKGCONFIG_XFT_LIBS = -L/source/Xdialog-2.3.1/lib -L/usr/xorg/lib -lXft -lXrender -lfontconfig -lfreetype -lz -lX11  
PKGCONFIG_X_LIBS =  -L/usr/xorg/lib -lX11 
PKG_CONFIG = /usr/bin/pkg-config
PLATFORM_WIN32_FALSE = 
PLATFORM_WIN32_TRUE = #
RANLIB = ranlib
REBUILD = 
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USP10_H = no
VERSION = 1.4.0
WIN32_LIBS = 
XFT_CFLAGS = -I/source/Xdialog-2.3.1/include -I/source/Xdialog-2.3.1/include/freetype2 -I/usr/xorg/include  
XFT_LIBS = -L/source/Xdialog-2.3.1/lib -L/usr/xorg/lib -lXft -lXrender -lfontconfig -lfreetype -lz -lX11  
XMLCATALOG = /usr/bin/xmlcatalog
XML_CATALOG_FILE = /etc/xml/catalog
XSLTPROC = /usr/bin/xsltproc
X_CFLAGS =  -I/usr/xorg/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/xorg/lib -lX11
X_PRE_LIBS =  -lSM -lICE
ac_ct_AR = ar
ac_ct_AS = 
ac_ct_CC = i486-TSOL-linux-gnu-gcc
ac_ct_CXX = 
ac_ct_DLLTOOL = 
ac_ct_F77 = 
ac_ct_OBJDUMP = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /source/gtk/2.4.0/pango-1.4.0/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
ms_librarian = 
oldincludedir = /usr/include
prefix = /source/Xdialog-2.3.1
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 

# We set GPATH here; this gives us semantics for GNU make
# which are more like other make's VPATH.
GPATH = $(srcdir)

OPENTYPE_SUBDIR = opentype

SUBDIRS = $(OPENTYPE_SUBDIR) mini-fribidi

DIST_SUBDIRS = mini-fribidi opentype

INCLUDES = \
	-DPANGO_ENABLE_BACKEND				\
	-DPANGO_ENABLE_ENGINE				\
	-DSYSCONFDIR=\"$(sysconfdir)\"			\
	-DLIBDIR=\"$(libdir)\"				\
	-DMODULE_VERSION=\"$(PANGO_MODULE_VERSION)\"	\
	-DG_DISABLE_DEPRECATED				\
	$(PANGO_DEBUG_FLAGS)				\
	$(GLIB_CFLAGS)					\
	$(XFT_CFLAGS)					\
	$(FREETYPE_CFLAGS)				\
	$(X_CFLAGS)					\
	-I$(top_srcdir)


BUILT_SOURCES = pango-enum-types.h pango-enum-types.c

pangoincludedir = $(includedir)/pango-1.0/pango

#no_undefined = -no-undefined


# ------------------- libpango -------------------
lib_LTLIBRARIES = libpango-1.0.la $(am__append_5) $(am__append_7) $(am__append_9) $(am__append_14)

libpango_1_0_la_LDFLAGS = -version-info $(LT_VERSION_INFO) $(no_undefined) $(am__append_1)
libpango_1_0_la_LIBADD = $(GLIB_LIBS) mini-fribidi/libmini-fribidi.la $(am__append_2)
libpango_1_0_la_DEPENDENCIES = mini-fribidi/libmini-fribidi.la $(am__append_3)

libpango_1_0_la_SOURCES = \
	break.c 	       \
	fonts.c 	       \
	glyphstring.c 	       \
	mapping.c 	       \
	modules.c 	       \
	pango-attributes.c     \
	pango-color.c	       \
	pango-context.c        \
	pango-coverage.c       \
	pango-engine.c	       \
	pango-engine-private.h \
	pango-fontmap.c	       \
	pango-fontset.c	       \
	pango-glyph-item.c     \
	pango-impl-utils.h     \
	pango-item.c	       \
	pango-layout.c	       \
	pango-markup.c	       \
	pango-script.c	       \
	pango-script-lang-table.h \
	pango-script-table.h   \
	pango-tabs.c	       \
	pango-utils.c	       \
	reorder-items.c        \
	shape.c	               \
	pango-enum-types.c


pango_headers = \
	pango.h		   \
	pango-attributes.h \
	pango-break.h	   \
	pango-context.h	   \
	pango-coverage.h   \
	pango-engine.h	   \
	pango-font.h       \
	pango-fontmap.h	   \
	pango-fontset.h    \
	pango-glyph.h	   \
	pango-glyph-item.h \
	pango-item.h	   \
	pango-layout.h	   \
	pango-modules.h	   \
	pango-script.h	   \
	pango-tabs.h	   \
	pango-types.h	   \
	pango-utils.h	   \
	pangofc-font.h	   \
	pangofc-fontmap.h


pangoinclude_HEADERS = \
	$(pango_headers)   \
	pango-enum-types.h\
$(am__append_4) $(am__append_6) $(am__append_8) $(am__append_13)

libpangox_1_0_la_LDFLAGS = -version-info $(LT_VERSION_INFO)
libpangox_1_0_la_LIBADD = libpango-$(PANGO_API_VERSION).la $(INCLUDED_X_MODULES) $(X_LIBS) $(X_EXTRA_LIBS)
libpangox_1_0_la_DEPENDENCIES = libpango-$(PANGO_API_VERSION).la $(INCLUDED_X_MODULES)

libpangox_1_0_la_SOURCES = \
	modules.h 	   \
	module-defs-x.c	   \
	pangox.c	   \
	pangox-private.h   \
	pangox-fontcache.c \
	pangox-fontmap.c


libpangoxft_1_0_la_LDFLAGS = -version-info $(LT_VERSION_INFO)
libpangoxft_1_0_la_LIBADD = libpangoft2-$(PANGO_API_VERSION).la libpango-$(PANGO_API_VERSION).la $(XFT_LIBS) 
libpangoxft_1_0_la_DEPENDENCIES = libpangoft2-$(PANGO_API_VERSION).la libpango-$(PANGO_API_VERSION).la

libpangoxft_1_0_la_SOURCES = \
	pangoxft-font.c		\
	pangoxft-fontmap.c      \
	pangoxft-private.h


libpangoft2_1_0_la_LDFLAGS = -version-info $(LT_VERSION_INFO) $(no_undefined) $(am__append_10)
libpangoft2_1_0_la_LIBADD = opentype/libpango-ot.la libpango-$(PANGO_API_VERSION).la $(INCLUDED_FC_MODULES) $(FREETYPE_LIBS) $(GLIB_LIBS) $(am__append_11)
libpangoft2_1_0_la_DEPENDENCIES = opentype/libpango-ot.la libpango-$(PANGO_API_VERSION).la $(INCLUDED_FC_MODULES) $(am__append_12)

libpangoft2_1_0_la_SOURCES = \
	pangofc-font.c	   	\
	pangofc-fontmap.c	\
	pangofc-private.h	\
	pangoft2.h		\
	pangoft2.c		\
	pangoft2-private.h	\
	pangoft2-fontmap.c	\
	module-defs-fc.c


libpangowin32_1_0_la_LDFLAGS = -version-info $(LT_VERSION_INFO)	$(no_undefined) $(am__append_15)
libpangowin32_1_0_la_LIBADD = libpango-$(PANGO_API_VERSION).la $(INCLUDED_WIN32_MODULES) $(WIN32_LIBS) $(GLIB_LIBS) $(am__append_16)
libpangowin32_1_0_la_DEPENDENCIES = libpango-$(PANGO_API_VERSION).la $(INCLUDED_WIN32_MODULES) $(am__append_17)

libpangowin32_1_0_la_SOURCES = \
	pangowin32.h		\
	pangowin32.c		\
	pangowin32-private.h	\
	pangowin32-fontcache.c	\
	pangowin32-fontmap.c	\
	module-defs-win32.c


#noinst_DATA = pango-$(PANGO_API_VERSION).lib pangoft2-$(PANGO_API_VERSION).lib pangowin32-$(PANGO_API_VERSION).lib


# ------------------- pango-querymodules -------------------
bin_PROGRAMS = pango-querymodules

#
# As a temporary hack, we pull in libpangox here so that we can link
#
pango_querymodules_SOURCES = \
	querymodules.c


pango_querymodules_LDADD = $(am__append_18) $(am__append_19) $(am__append_20) $(am__append_21) libpango-$(PANGO_API_VERSION).la $(GLIB_LIBS)

EXTRA_DIST = \
	pango-enum-types.h			\
	module-defs-fc.c.win32			\
	module-defs-win32.c.win32		\
	module-defs.h				\
	pango.def				\
	pangowin32.def				\
	pangoft2.def				\
	makefile.msc				\
	pango.rc				\
	pango.rc.in				\
	pangoft2.rc				\
	pangoft2.rc.in				\
	pangowin32.rc				\
	pangowin32.rc.in			\
	testfonts.c


CLEANFILES = \
	pango-enum-types.h	\
	s-enum-types-h		\
	pango-enum-types.c	\
	s-enum-types-c		\
	module-defs.h		\
	module-defs-x.c		\
	module-defs-fc.c	\
	module-defs-win32.c

subdir = pango
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = pango.rc pangoft2.rc pangowin32.rc
LTLIBRARIES = $(lib_LTLIBRARIES)

am_libpango_1_0_la_OBJECTS = break.lo fonts.lo glyphstring.lo mapping.lo \
	modules.lo pango-attributes.lo pango-color.lo pango-context.lo \
	pango-coverage.lo pango-engine.lo pango-fontmap.lo \
	pango-fontset.lo pango-glyph-item.lo pango-item.lo \
	pango-layout.lo pango-markup.lo pango-script.lo pango-tabs.lo \
	pango-utils.lo reorder-items.lo shape.lo pango-enum-types.lo
libpango_1_0_la_OBJECTS = $(am_libpango_1_0_la_OBJECTS)
am_libpangoft2_1_0_la_OBJECTS = pangofc-font.lo pangofc-fontmap.lo \
	pangoft2.lo pangoft2-fontmap.lo module-defs-fc.lo
libpangoft2_1_0_la_OBJECTS = $(am_libpangoft2_1_0_la_OBJECTS)
am_libpangowin32_1_0_la_OBJECTS = pangowin32.lo pangowin32-fontcache.lo \
	pangowin32-fontmap.lo module-defs-win32.lo
libpangowin32_1_0_la_OBJECTS = $(am_libpangowin32_1_0_la_OBJECTS)
am_libpangox_1_0_la_OBJECTS = module-defs-x.lo pangox.lo \
	pangox-fontcache.lo pangox-fontmap.lo
libpangox_1_0_la_OBJECTS = $(am_libpangox_1_0_la_OBJECTS)
am_libpangoxft_1_0_la_OBJECTS = pangoxft-font.lo pangoxft-fontmap.lo
libpangoxft_1_0_la_OBJECTS = $(am_libpangoxft_1_0_la_OBJECTS)
bin_PROGRAMS = pango-querymodules$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_pango_querymodules_OBJECTS = querymodules.$(OBJEXT)
pango_querymodules_OBJECTS = $(am_pango_querymodules_OBJECTS)
##pango_querymodules_DEPENDENCIES = \
##	libpangox-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
###pango_querymodules_DEPENDENCIES = \
###	libpango-$(PANGO_API_VERSION).la
#pango_querymodules_DEPENDENCIES = \
#	libpangox-$(PANGO_API_VERSION).la \
#	libpangoxft-$(PANGO_API_VERSION).la \
#	libpango-$(PANGO_API_VERSION).la
##pango_querymodules_DEPENDENCIES = \
##	libpangoxft-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
###pango_querymodules_DEPENDENCIES = \
###	libpangox-$(PANGO_API_VERSION).la \
###	libpangowin32-$(PANGO_API_VERSION).la \
###	libpango-$(PANGO_API_VERSION).la
####pango_querymodules_DEPENDENCIES = \
####	libpangowin32-$(PANGO_API_VERSION).la \
####	libpango-$(PANGO_API_VERSION).la
##pango_querymodules_DEPENDENCIES = \
##	libpangox-$(PANGO_API_VERSION).la \
##	libpangoxft-$(PANGO_API_VERSION).la \
##	libpangowin32-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
###pango_querymodules_DEPENDENCIES = \
###	libpangoxft-$(PANGO_API_VERSION).la \
###	libpangowin32-$(PANGO_API_VERSION).la \
###	libpango-$(PANGO_API_VERSION).la
#pango_querymodules_DEPENDENCIES = \
#	libpangox-$(PANGO_API_VERSION).la \
#	libpangoft2-$(PANGO_API_VERSION).la \
#	libpango-$(PANGO_API_VERSION).la
##pango_querymodules_DEPENDENCIES = \
##	libpangoft2-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
pango_querymodules_DEPENDENCIES = \
	libpangox-$(PANGO_API_VERSION).la \
	libpangoxft-$(PANGO_API_VERSION).la \
	libpangoft2-$(PANGO_API_VERSION).la \
	libpango-$(PANGO_API_VERSION).la
#pango_querymodules_DEPENDENCIES = \
#	libpangoxft-$(PANGO_API_VERSION).la \
#	libpangoft2-$(PANGO_API_VERSION).la \
#	libpango-$(PANGO_API_VERSION).la
##pango_querymodules_DEPENDENCIES = \
##	libpangox-$(PANGO_API_VERSION).la \
##	libpangoft2-$(PANGO_API_VERSION).la \
##	libpangowin32-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
###pango_querymodules_DEPENDENCIES = \
###	libpangoft2-$(PANGO_API_VERSION).la \
###	libpangowin32-$(PANGO_API_VERSION).la \
###	libpango-$(PANGO_API_VERSION).la
#pango_querymodules_DEPENDENCIES = \
#	libpangox-$(PANGO_API_VERSION).la \
#	libpangoxft-$(PANGO_API_VERSION).la \
#	libpangoft2-$(PANGO_API_VERSION).la \
#	libpangowin32-$(PANGO_API_VERSION).la \
#	libpango-$(PANGO_API_VERSION).la
##pango_querymodules_DEPENDENCIES = \
##	libpangoxft-$(PANGO_API_VERSION).la \
##	libpangoft2-$(PANGO_API_VERSION).la \
##	libpangowin32-$(PANGO_API_VERSION).la \
##	libpango-$(PANGO_API_VERSION).la
pango_querymodules_LDFLAGS =

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/break.Plo ./$(DEPDIR)/fonts.Plo \
	./$(DEPDIR)/glyphstring.Plo ./$(DEPDIR)/mapping.Plo \
	./$(DEPDIR)/module-defs-fc.Plo \
	./$(DEPDIR)/module-defs-win32.Plo \
	./$(DEPDIR)/module-defs-x.Plo \
	./$(DEPDIR)/modules.Plo \
	./$(DEPDIR)/pango-attributes.Plo \
	./$(DEPDIR)/pango-color.Plo \
	./$(DEPDIR)/pango-context.Plo \
	./$(DEPDIR)/pango-coverage.Plo \
	./$(DEPDIR)/pango-engine.Plo \
	./$(DEPDIR)/pango-enum-types.Plo \
	./$(DEPDIR)/pango-fontmap.Plo \
	./$(DEPDIR)/pango-fontset.Plo \
	./$(DEPDIR)/pango-glyph-item.Plo \
	./$(DEPDIR)/pango-item.Plo \
	./$(DEPDIR)/pango-layout.Plo \
	./$(DEPDIR)/pango-markup.Plo \
	./$(DEPDIR)/pango-script.Plo \
	./$(DEPDIR)/pango-tabs.Plo \
	./$(DEPDIR)/pango-utils.Plo \
	./$(DEPDIR)/pangofc-font.Plo \
	./$(DEPDIR)/pangofc-fontmap.Plo \
	./$(DEPDIR)/pangoft2-fontmap.Plo \
	./$(DEPDIR)/pangoft2.Plo \
	./$(DEPDIR)/pangowin32-fontcache.Plo \
	./$(DEPDIR)/pangowin32-fontmap.Plo \
	./$(DEPDIR)/pangowin32.Plo \
	./$(DEPDIR)/pangox-fontcache.Plo \
	./$(DEPDIR)/pangox-fontmap.Plo \
	./$(DEPDIR)/pangox.Plo \
	./$(DEPDIR)/pangoxft-font.Plo \
	./$(DEPDIR)/pangoxft-fontmap.Plo \
	./$(DEPDIR)/querymodules.Po \
	./$(DEPDIR)/reorder-items.Plo ./$(DEPDIR)/shape.Plo
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libpango_1_0_la_SOURCES) $(libpangoft2_1_0_la_SOURCES) \
	$(libpangowin32_1_0_la_SOURCES) $(libpangox_1_0_la_SOURCES) \
	$(libpangoxft_1_0_la_SOURCES) $(pango_querymodules_SOURCES)
DATA = $(noinst_DATA)

HEADERS = $(pangoinclude_HEADERS)


RECURSIVE_TARGETS = info-recursive dvi-recursive pdf-recursive \
	ps-recursive install-info-recursive uninstall-info-recursive \
	all-recursive install-data-recursive install-exec-recursive \
	installdirs-recursive install-recursive uninstall-recursive \
	check-recursive installcheck-recursive
DIST_COMMON = $(pangoinclude_HEADERS) $(srcdir)/Makefile.in Makefile.am \
	pango.rc.in pangoft2.rc.in pangowin32.rc.in
SOURCES = $(libpango_1_0_la_SOURCES) $(libpangoft2_1_0_la_SOURCES) $(libpangowin32_1_0_la_SOURCES) $(libpangox_1_0_la_SOURCES) $(libpangoxft_1_0_la_SOURCES) $(pango_querymodules_SOURCES)

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  pango/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
pango.rc: $(top_builddir)/config.status pango.rc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
pangoft2.rc: $(top_builddir)/config.status pangoft2.rc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
pangowin32.rc: $(top_builddir)/config.status pangowin32.rc.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
libLTLIBRARIES_INSTALL = $(INSTALL)
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f="`echo $$p | sed -e 's|^.*/||'`"; \
	    echo " $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) $$p $(DESTDIR)$(libdir)/$$f"; \
	    $(LIBTOOL) --mode=install $(libLTLIBRARIES_INSTALL) $(INSTALL_STRIP_FLAG) $$p $(DESTDIR)$(libdir)/$$f; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	    p="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p"; \
	  $(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libpango-1.0.la: $(libpango_1_0_la_OBJECTS) $(libpango_1_0_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpango_1_0_la_LDFLAGS) $(libpango_1_0_la_OBJECTS) $(libpango_1_0_la_LIBADD) $(LIBS)
libpangoft2-1.0.la: $(libpangoft2_1_0_la_OBJECTS) $(libpangoft2_1_0_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpangoft2_1_0_la_LDFLAGS) $(libpangoft2_1_0_la_OBJECTS) $(libpangoft2_1_0_la_LIBADD) $(LIBS)
libpangowin32-1.0.la: $(libpangowin32_1_0_la_OBJECTS) $(libpangowin32_1_0_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpangowin32_1_0_la_LDFLAGS) $(libpangowin32_1_0_la_OBJECTS) $(libpangowin32_1_0_la_LIBADD) $(LIBS)
libpangox-1.0.la: $(libpangox_1_0_la_OBJECTS) $(libpangox_1_0_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpangox_1_0_la_LDFLAGS) $(libpangox_1_0_la_OBJECTS) $(libpangox_1_0_la_LIBADD) $(LIBS)
libpangoxft-1.0.la: $(libpangoxft_1_0_la_OBJECTS) $(libpangoxft_1_0_la_DEPENDENCIES) 
	$(LINK) -rpath $(libdir) $(libpangoxft_1_0_la_LDFLAGS) $(libpangoxft_1_0_la_OBJECTS) $(libpangoxft_1_0_la_LIBADD) $(LIBS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
pango-querymodules$(EXEEXT): $(pango_querymodules_OBJECTS) $(pango_querymodules_DEPENDENCIES) 
	@rm -f pango-querymodules$(EXEEXT)
	$(LINK) $(pango_querymodules_LDFLAGS) $(pango_querymodules_OBJECTS) $(pango_querymodules_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/break.Plo
include ./$(DEPDIR)/fonts.Plo
include ./$(DEPDIR)/glyphstring.Plo
include ./$(DEPDIR)/mapping.Plo
include ./$(DEPDIR)/module-defs-fc.Plo
include ./$(DEPDIR)/module-defs-win32.Plo
include ./$(DEPDIR)/module-defs-x.Plo
include ./$(DEPDIR)/modules.Plo
include ./$(DEPDIR)/pango-attributes.Plo
include ./$(DEPDIR)/pango-color.Plo
include ./$(DEPDIR)/pango-context.Plo
include ./$(DEPDIR)/pango-coverage.Plo
include ./$(DEPDIR)/pango-engine.Plo
include ./$(DEPDIR)/pango-enum-types.Plo
include ./$(DEPDIR)/pango-fontmap.Plo
include ./$(DEPDIR)/pango-fontset.Plo
include ./$(DEPDIR)/pango-glyph-item.Plo
include ./$(DEPDIR)/pango-item.Plo
include ./$(DEPDIR)/pango-layout.Plo
include ./$(DEPDIR)/pango-markup.Plo
include ./$(DEPDIR)/pango-script.Plo
include ./$(DEPDIR)/pango-tabs.Plo
include ./$(DEPDIR)/pango-utils.Plo
include ./$(DEPDIR)/pangofc-font.Plo
include ./$(DEPDIR)/pangofc-fontmap.Plo
include ./$(DEPDIR)/pangoft2-fontmap.Plo
include ./$(DEPDIR)/pangoft2.Plo
include ./$(DEPDIR)/pangowin32-fontcache.Plo
include ./$(DEPDIR)/pangowin32-fontmap.Plo
include ./$(DEPDIR)/pangowin32.Plo
include ./$(DEPDIR)/pangox-fontcache.Plo
include ./$(DEPDIR)/pangox-fontmap.Plo
include ./$(DEPDIR)/pangox.Plo
include ./$(DEPDIR)/pangoxft-font.Plo
include ./$(DEPDIR)/pangoxft-fontmap.Plo
include ./$(DEPDIR)/querymodules.Po
include ./$(DEPDIR)/reorder-items.Plo
include ./$(DEPDIR)/shape.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
pangoincludeHEADERS_INSTALL = $(INSTALL_HEADER)
install-pangoincludeHEADERS: $(pangoinclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pangoincludedir)
	@list='$(pangoinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " $(pangoincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pangoincludedir)/$$f"; \
	  $(pangoincludeHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pangoincludedir)/$$f; \
	done

uninstall-pangoincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pangoinclude_HEADERS)'; for p in $$list; do \
	  f="`echo $$p | sed -e 's|^.*/||'`"; \
	  echo " rm -f $(DESTDIR)$(pangoincludedir)/$$f"; \
	  rm -f $(DESTDIR)$(pangoincludedir)/$$f; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if (etags --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	else \
	  include_option=--include; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(libdir) $(DESTDIR)$(bindir) $(DESTDIR)$(pangoincludedir)

install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am: install-data-local install-pangoincludeHEADERS

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-libLTLIBRARIES uninstall-local \
	uninstall-pangoincludeHEADERS

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-recursive ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-recursive distclean-tags distdir dvi dvi-am \
	dvi-recursive info info-am info-recursive install install-am \
	install-binPROGRAMS install-data install-data-am \
	install-data-local install-data-recursive install-exec \
	install-exec-am install-exec-recursive install-info \
	install-info-am install-info-recursive install-libLTLIBRARIES \
	install-man install-pangoincludeHEADERS install-recursive \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am installdirs-recursive maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	mostlyclean-recursive pdf pdf-am pdf-recursive ps ps-am \
	ps-recursive tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am \
	uninstall-info-recursive uninstall-libLTLIBRARIES \
	uninstall-local uninstall-pangoincludeHEADERS \
	uninstall-recursive

pango-win32res.lo: pango.rc
	$(top_srcdir)/../glib/build/win32/lt-compile-resource $< $@

pango-enum-types.h: s-enum-types-h
	@true
s-enum-types-h:  $(pango_headers) Makefile
	( cd $(srcdir) && glib-mkenums \
			--fhead "#ifndef __PANGO_ENUM_TYPES_H__\n#define __PANGO_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n" \
			--fprod "/* enumerations from \"@filename@\" */\n" \
			--vhead "GType @enum_name@_get_type (void);\n#define PANGO_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n" 	\
			--ftail "G_END_DECLS\n\n#endif /* __PANGO_ENUM_TYPES_H__ */" \
		$(pango_headers) ) > tmp-pango-enum-types.h \
	&& (cmp -s tmp-pango-enum-types.h pango-enum-types.h || cp tmp-pango-enum-types.h pango-enum-types.h ) \
	&& rm -f tmp-pango-enum-types.h	\
	&& echo timestamp > $(@F)

pango-enum-types.c: s-enum-types-c
	@true
s-enum-types-c:  $(pango_headers) Makefile
	( cd $(srcdir) && glib-mkenums \
			--fhead "#include <pango.h>" \
			--fprod "\n/* enumerations from \"@filename@\" */" \
			--vhead "GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {" 	\
			--vprod "      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" }," \
			--vtail "      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n" \
		$(pango_headers) ) > tmp-pango-enum-types.c \
	&& (cmp -s tmp-pango-enum-types.c pango-enum-types.c || cp tmp-pango-enum-types.c pango-enum-types.c ) \
	&& rm -f tmp-pango-enum-types.c \
	&& echo timestamp > $(@F)
pangoft2-win32res.lo: pangoft2.rc
	$(top_srcdir)/../glib/build/win32/lt-compile-resource $< $@
pangowin32-win32res.lo: pangowin32.rc
	$(top_srcdir)/../glib/build/win32/lt-compile-resource $< $@

# ------------------- win32 build stuff -------------------

#install-libtool-import-lib:
#	$(INSTALL) .libs/libpango-$(PANGO_API_VERSION).dll.a $(DESTDIR)$(libdir)
#	$(INSTALL) .libs/libpangoft2-$(PANGO_API_VERSION).dll.a $(DESTDIR)$(libdir)
#	$(INSTALL) .libs/libpangowin32-$(PANGO_API_VERSION).dll.a $(DESTDIR)$(libdir)
#uninstall-libtool-import-lib:
#	-rm $(DESTDIR)$(libdir)/libpango-$(PANGO_API_VERSION).dll.a
#	-rm $(DESTDIR)$(libdir)/libpangoft2-$(PANGO_API_VERSION).dll.a
#	-rm $(DESTDIR)$(libdir)/libpangowin32-$(PANGO_API_VERSION).dll.a
install-libtool-import-lib:
uninstall-libtool-import-lib:

#install-ms-lib:
#	$(INSTALL) pango-$(PANGO_API_VERSION).lib $(DESTDIR)$(libdir)
#	$(INSTALL) pangoft2-$(PANGO_API_VERSION).lib $(DESTDIR)$(libdir)
#	$(INSTALL) pangowin32-$(PANGO_API_VERSION).lib $(DESTDIR)$(libdir)

#uninstall-ms-lib:
#	-rm $(DESTDIR)$(libdir)/pango-$(PANGO_API_VERSION).lib
#	-rm $(DESTDIR)$(libdir)/pangoft2-$(PANGO_API_VERSION).lib
#	-rm $(DESTDIR)$(libdir)/pangowin32-$(PANGO_API_VERSION).lib
install-ms-lib:
uninstall-ms-lib:

pango-$(PANGO_API_VERSION).lib: libpango-$(PANGO_API_VERSION).la $(srcdir)/pango.def
	lib -name:libpango-$(PANGO_API_VERSION)-$(LT_CURRENT_MINUS_AGE).dll -def:$(srcdir)/pango.def -out:$@

pangoft2-$(PANGO_API_VERSION).lib: libpangoft2-$(PANGO_API_VERSION).la $(srcdir)/pangoft2.def
	lib -name:libpangoft2-$(PANGO_API_VERSION)-$(LT_CURRENT_MINUS_AGE).dll -def:$(srcdir)/pangoft2.def -out:$@

pangowin32-$(PANGO_API_VERSION).lib: libpangowin32-$(PANGO_API_VERSION).la $(srcdir)/pangowin32.def
	lib -name:libpangowin32-$(PANGO_API_VERSION)-$(LT_CURRENT_MINUS_AGE).dll -def:$(srcdir)/pangowin32.def -out:$@

included-modules:
	@cd $(top_builddir)/modules && $(MAKE) $(AM_MAKEFLAGS) included-modules

$(INCLUDED_X_MODULES) $(INCLUDED_FC_MODULES) $(INCLUDED_WIN32_MODULES): included-modules
	@true

.PHONY: included-modules

module-defs.h: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status pango/$@
module-defs-x.c: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status pango/$@
module-defs-fc.c: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status pango/$@
module-defs-win32.c: $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status pango/$@

install-data-local: install-ms-lib install-libtool-import-lib

install-exec-hook: 
#	-for i in libpangoft2-$(PANGO_API_VERSION).la libpangoxft-$(PANGO_API_VERSION).la libpangox-$(PANGO_API_VERSION).la libpangowin32-$(PANGO_API_VERSION).la; do \
#	  test -f $(DESTDIR)$(libdir)/$$i && $(SHELL) $(top_srcdir)/sanitize-la.sh $(DESTDIR)$(libdir)/$$i ; \
#	done

uninstall-local: uninstall-ms-lib uninstall-libtool-import-lib
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
