# Functions

get_debug_level()
{
    local dlevel=1 x=7 num
    num=$1
    while [ $x -gt 0 ] ; do
          let x=x-1
          let dlevel=$((num/(2**x)))
          if [ $dlevel -gt 0 ] ; then
                let num=$((num-(2**x)))
                case $x in
                0)
                  DEBUG_BOOT=1
                  ;;
                1)
                  DEBUG_NETWORK=2
                  ;;
                2)
                  DEBUG_INIT=4
                  ;;
                3)
                  DEBUG_KERNEL=8
                  ;;
                4)
                  DEBUG_MODULES=16
                  ;;
                5)
                  DEBUG_PACKAGES=32
                  ;;
                6)
                  DEBUG_EMAIL=64
                  ;;
                esac
          fi
    done
}

# If ponix.network/user is a dos file, converts it to unix

cleanup ()
{
	if [ -e $TS_NETWORK ] ; then
		sed -e 's/\//g' $TS_NETWORK > $TS_NETWORK.tmp
		cat $TS_NETWORK.tmp > $TS_NETWORK
		rm $TS_NETWORK.tmp
	fi
	if [ -e $TS_USER ] ; then
		sed -e 's/\//g' $TS_USER > $TS_USER.tmp
		cat $TS_USER.tmp > $TS_USER
		rm $TS_USER.tmp
	fi

}

parse_tpl ()  
{
    if [ -f $1.tpl ]; then 
	cat $1.tpl | sed -f /tmp/script > $1
    fi
}

# Log to file and console
echo_log ()
{
	local debug noline string

	until [ -z "$1" ]; do
		case $1 in
		"-n")
			noline="-n"
		;;
		"-d")
			debug="TRUE"
		;;
		*)
			string=$1
		;;
		esac
		shift
	done
	if [ -n "$debug" ] ; then
		echo -e $noline $string > $CONSOLE
	fi
	echo -e $noline $string >> $LOGFILE
}

## PKG functions

pkg_is_loaded ()
{
    if [ -f /etc/init.d/$1 ] ; then
	return 0
    else
	return 1
    fi
}

pkg_is_executable ()
{
    if [ -x /bin/$1 ] ; then
	return 0
    else
	return 1
    fi
}

pkg_initialized ()
{
    if [ -f /var/packages/$1 ]; then
	return 0
    else
        return 1
    fi
}

pkg_set_init_flag ()
{
    touch /var/packages/$1
}

## Make variable capitals

make_caps ()
{
	echo $1 | tr "[a-z]" "[A-Z]"
}

## Make variable lower

make_lower ()
{
	echo $1 | tr "[A-Z]" "[a-z]"
}

make_capital ()
{
   local word words badlist oneword x=0

   if [ "$1" = "-1" ] ; then
     oneword="TRUE"
     shift
   fi
   if [ $# -gt 1 ]; then
	until [ -z "$1" ]
	do
	     let x=x+1
	     case $1 in
	     VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
		word=$1
		;;
	     *)
		if [ -z "$oneword" ] || [ $x -eq 1 ] ; then
		  word=`echo $1 | cut -c1 | tr "[a-z]" "[A-Z]"`
		  word=$word`echo $1 | cut -c2- | tr "[A-Z]" "[a-z]"`
		else
		  word=`echo $1 | tr "[A-Z]" "[a-z]"`
		fi
		;;
	     esac
	     shift
	     words="$words $word"
	done
	echo $words
   else
	case $1 in
	VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
	   word=$1
	   ;;
	*)
	  word=`echo $1 | cut -c1 | tr "[a-z]" "[A-Z]"`
	  word=$word`echo $1 | cut -c2- | tr "[A-Z]" "[a-z]"`
	esac
	echo $word
   fi
}

# Window Manager dialogs

confirm_exit ()
{
        xwChoice -title "Logout" -question "Click OK to Confirm Exit?" -ok Ok -cancel Cancel 0 2>> $LOGFILE
}

dialog_get_server_address ()
{
        xwChoice -title "$1 Client" -question "Enter $1 server address:" -input -ok Ok -cancel Cancel 0 2>> $LOGFILE
}

dialog_no_value ()
{
        xwChoice -title "$1 Client" -question "You must enter value, aborted" -ok Ok -cancel Cancel 0 2>> $LOGFILE
}

dialog_get_value ()
{
        xwChoice -title "$1 Client" -question "Enter $2:" -input -ok Ok -cancel Cancel 0 2>> $LOGFILE
}

check_reconnect ()
{
  if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
	prompt="`make_caps $RECONNECT_PROMPT | cut -c1-4`" 
	if [ "$prompt" = "MENU" ] ; then

		prompt_time="`make_caps $RECONNECT_PROMPT | cut -c5-`" 
		if [ -n "$prompt_time" ] ; then
			kill_time=`date +%M`
			let kill_time=kill_time+prompt_time+1
			if [ $kill_time -gt 59 ] ; then
				let kill_time=kill_time-60
			fi
			   echo "$kill_time  * * * * /bin/poweroff" >> /tmp/poweroff
			   crontab /tmp/poweroff
		fi

        	choice=`xwChoice -title Reconnect/Shutdown? -question "Choose option then OK to continue."\
                    -choice Shutdown shutdown -choice Reconnect reconnect` 2>&1
		if [ "$choice" = "shutdown" ] ; then
			poweroff
		elif [ -e /tmp/poweroff ] ; then
			crontab /tmp/crontab
			rm /tmp/poweroff
		fi
	elif [ "$prompt" != "OFF" ] ; then
        	xwChoice -title Reconnect? -question "Click Ok to reconnect." -ok Ok >> $LOGFILE 2>&1
	fi
  fi
}

## Replace on or off with #

replace_variable ()
{
	if [ `make_caps $1` = "ON" ] ; then
		echo " "
	else
		echo "#"
	fi
}

## Replace space

replace_char ()
{
	echo $1 | sed -e "s/$2/$3/g"
}

# Check for invalid characters in options line

replace_invalid ()
{
	echo $1 | sed -e 's/ /\\ /g' | sed -e 's/\-/\\\-/g' |  sed -e 's/\//\\\//g'
}


# Overwrite file with sed command

sed_file ()
{
	cat $1 | sed -e $2 > /tmp/sed.tmp
	cat /tmp/sed.tmp > $1
	rm /tmp/sed.tmp
}

## Restart DHCP

restart_dhcp ()
{
	UPID=`pidof udhcpc`
	kill -SIGUSR2 $UPID
	kill -SIGHUP $UPID
	udhcpc -i $DEVICE -H $1 -s /etc/init.d/network_script
	UPID=`pidof udhcpc`
	kill -SIGUSR1 $UPID
	hostname $1
}

## Restart xinetd

restart_xinetd ()
{
	XPID=`pidof xinetd`
	kill -SIGHUP $XPID
}

# Checks when to reboot PC

check_reboot()
{
   DAILY_REBOOT=`make_caps $DAILY_REBOOT`
   if [ "$DAILY_REBOOT" = "ON" ]; then
	if uptime | grep day; then
		reboot
	fi
   fi
}

# Cleans up X if it shuts down unexpected

check_xrunning()
{
	if ! ps -w | grep "$X_SERVER" | grep -q " :$DISPLAY_NUMBER"; then
          if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
		rm /tmp/.X11-unix/X$DISPLAY_NUMBER
	  fi
	fi
}

# Checks to see if nxssh is running

check_NX ()
{
	while ps | grep -v grep | grep "nxssh"
	do
		sleep 5
	done
}


# Start X

start_x ()
{
	if [ -e /etc/init.d/x ]; then
		/etc/init.d/x start
	else
		echo "Can't find X" >> $LOGFILE
		sleep 1
	fi
}


# Splash Progess Bar
splash_progress ()
{
  if [ -e /proc/splash ] ; then
    echo "show $(( 65535 * ( $1 ) / $splash_total ))" > /proc/splash
  fi
}


# Check if Module loaded
check_module ()
{
	if lsmod | grep $1 > /dev/null ; then
		return 0
	else
		return 1
	fi
}

# Get Free XServer Number
getfreescreen()
{
	local X_NUMBER

        X_NUMBER=`ps -w | grep "Xorg " | cut -f2 -d: | cut -f1 -d" "`
	x_NUMBER=$X_NUMBER `ps -w | grep "Xnest "  | cut -f2 -d: | cut -f1 d" "`
        let XNEST_NUMBER=0
        for x in $x_NUMBER;
        do
                if [ "$x" -ge "$XNEST_NUMBER" ] ; then
                        let XNEST_NUMBER=x+1
                fi
        done
}

get_filesystems()
{
        for filename in $FILESYSTEMS
        do
                if [ -e $MOD_PATH/inbuilt/$filename.ko ] || [ -e $MOD_PATH/loaded/$filename.ko ] ; then
			if [ "$filename" != "supermount" ] ; then
                		filesystem=$filename:$filesystem
			fi
		        if ! check_module $filename ; then
               			modprobe $filename
        		fi
                fi
        done
	let length=${#filesystem}-1
	if [ "$length" -gt 0 ] ; then
		filesystem=`echo $filesystem | cut -c 1-$length`
	fi
}

getpostcontent()
{
	CONTENT=
	if [ -n "$CONTENT_LENGTH" ]
	then
		read CONTENT
	fi
	if [ -n "$CONTENT" ]
	then
		eval `echo "&$CONTENT" | sed s/"&"/"\nCGI_"/g`
	fi
}


# Below code taken from PXES with modifications

#----------------------------------------------------------------------
#      ___       ___ ___   P X E S   Universal  Linux  Thin  Client
#     /__/\\_// /__ /__    Copyright(C) 2003 by Diego Torres Milano
#    /    // \\/__  __/    All rights reserved.  http://pxes.sf.net
#
# Author: Diego Torres Milano <diego@pxes.com.ar>
# $Id: xtools,v 1.2 2003/09/25 02:10:34 diego Exp $
#----------------------------------------------------------------------

refresh()
{
	local UPDATE=${1:-60}

	echo '
<meta HTTP-EQUIV="REFRESH" CONTENT="'$UPDATE'">
<meta HTTP-EQUIV="EXPIRES" CONTENT="'`/bin/date +%s`'">
'
}

header()
{
echo -e "Content-Type: text/html\n"
echo '
<html>

<head>
  <title>:: ThinStation ::</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link href="../style.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">

<tr>
	<a href="../index.html">
            <img src="../images/ts_logo.jpg" width="650" height="153" border="0" alt="Thinstation logo">
	</a>
</tr>


<h2>Thinstation '`echo $TS_VERSION`' on '`hostname`' :: '`basename $0 .cgi`'</h2>
<pre>&nbsp;</pre>
'
}

trailer()
{
	echo '</body>'
	echo '</html>'
}

# Verify's Web Password

getpasswd()
{
	local LOGIN=$1

	set +x

	if [ -z "$LOGIN" ]
	then
		echo "ERROR: Invalid login" >&2
		return
	fi

	sed -n "s/^$LOGIN:\\([^:]*\\):.*/\\1/p" < /etc/passwd
}

verify_password()
{
	local LOGIN=$1 PASSWD=$2 p s e

	if [ -z "$LOGIN" ]
	then
		echo "Null login" >&2
		return 1
	fi

	if [ -z "$PASSWD" ]
	then
		echo "Null password" >&2
		return 1
	fi

	p=`getpasswd $LOGIN`
	s=`echo "$p" | cut -f1-3 -d\$`
	e=`/bin/checkpass $PASSWD $s`

	if [ "$p" = "$e" ]
	then
		return 0
	else
		return 1
	fi
}


